// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IPMIData.proto

#ifndef PROTOBUF_IPMIData_2eproto__INCLUDED
#define PROTOBUF_IPMIData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IPMIData_2eproto();
void protobuf_AssignDesc_IPMIData_2eproto();
void protobuf_ShutdownFile_IPMIData_2eproto();

class ValueData;
class FruData;
class LogData;
class CollectData;

// ===================================================================

class ValueData : public ::google::protobuf::Message {
 public:
  ValueData();
  virtual ~ValueData();
  
  ValueData(const ValueData& from);
  
  inline ValueData& operator=(const ValueData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueData& default_instance();
  
  void Swap(ValueData* other);
  
  // implements Message ----------------------------------------------
  
  ValueData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ValueData& from);
  void MergeFrom(const ValueData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string sdr_name = 1;
  inline bool has_sdr_name() const;
  inline void clear_sdr_name();
  static const int kSdrNameFieldNumber = 1;
  inline const ::std::string& sdr_name() const;
  inline void set_sdr_name(const ::std::string& value);
  inline void set_sdr_name(const char* value);
  inline void set_sdr_name(const char* value, size_t size);
  inline ::std::string* mutable_sdr_name();
  inline ::std::string* release_sdr_name();
  
  // required uint32 sdr_num = 2;
  inline bool has_sdr_num() const;
  inline void clear_sdr_num();
  static const int kSdrNumFieldNumber = 2;
  inline ::google::protobuf::uint32 sdr_num() const;
  inline void set_sdr_num(::google::protobuf::uint32 value);
  
  // required float value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline float value() const;
  inline void set_value(float value);
  
  // @@protoc_insertion_point(class_scope:ValueData)
 private:
  inline void set_has_sdr_name();
  inline void clear_has_sdr_name();
  inline void set_has_sdr_num();
  inline void clear_has_sdr_num();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* sdr_name_;
  ::google::protobuf::uint32 sdr_num_;
  float value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_IPMIData_2eproto();
  friend void protobuf_AssignDesc_IPMIData_2eproto();
  friend void protobuf_ShutdownFile_IPMIData_2eproto();
  
  void InitAsDefaultInstance();
  static ValueData* default_instance_;
};
// -------------------------------------------------------------------

class FruData : public ::google::protobuf::Message {
 public:
  FruData();
  virtual ~FruData();
  
  FruData(const FruData& from);
  
  inline FruData& operator=(const FruData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FruData& default_instance();
  
  void Swap(FruData* other);
  
  // implements Message ----------------------------------------------
  
  FruData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FruData& from);
  void MergeFrom(const FruData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string fru_name = 1;
  inline bool has_fru_name() const;
  inline void clear_fru_name();
  static const int kFruNameFieldNumber = 1;
  inline const ::std::string& fru_name() const;
  inline void set_fru_name(const ::std::string& value);
  inline void set_fru_name(const char* value);
  inline void set_fru_name(const char* value, size_t size);
  inline ::std::string* mutable_fru_name();
  inline ::std::string* release_fru_name();
  
  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:FruData)
 private:
  inline void set_has_fru_name();
  inline void clear_has_fru_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* fru_name_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_IPMIData_2eproto();
  friend void protobuf_AssignDesc_IPMIData_2eproto();
  friend void protobuf_ShutdownFile_IPMIData_2eproto();
  
  void InitAsDefaultInstance();
  static FruData* default_instance_;
};
// -------------------------------------------------------------------

class LogData : public ::google::protobuf::Message {
 public:
  LogData();
  virtual ~LogData();
  
  LogData(const LogData& from);
  
  inline LogData& operator=(const LogData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogData& default_instance();
  
  void Swap(LogData* other);
  
  // implements Message ----------------------------------------------
  
  LogData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogData& from);
  void MergeFrom(const LogData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // optional uint32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);
  
  // required string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // @@protoc_insertion_point(class_scope:LogData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_content();
  inline void clear_has_content();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 time_;
  ::std::string* content_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_IPMIData_2eproto();
  friend void protobuf_AssignDesc_IPMIData_2eproto();
  friend void protobuf_ShutdownFile_IPMIData_2eproto();
  
  void InitAsDefaultInstance();
  static LogData* default_instance_;
};
// -------------------------------------------------------------------

class CollectData : public ::google::protobuf::Message {
 public:
  CollectData();
  virtual ~CollectData();
  
  CollectData(const CollectData& from);
  
  inline CollectData& operator=(const CollectData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CollectData& default_instance();
  
  void Swap(CollectData* other);
  
  // implements Message ----------------------------------------------
  
  CollectData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CollectData& from);
  void MergeFrom(const CollectData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline const ::std::string& server_id() const;
  inline void set_server_id(const ::std::string& value);
  inline void set_server_id(const char* value);
  inline void set_server_id(const char* value, size_t size);
  inline ::std::string* mutable_server_id();
  inline ::std::string* release_server_id();
  
  // required uint32 server_type = 2;
  inline bool has_server_type() const;
  inline void clear_server_type();
  static const int kServerTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 server_type() const;
  inline void set_server_type(::google::protobuf::uint32 value);
  
  // required uint32 collect_time = 3;
  inline bool has_collect_time() const;
  inline void clear_collect_time();
  static const int kCollectTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 collect_time() const;
  inline void set_collect_time(::google::protobuf::uint32 value);
  
  // optional string server_ip = 4;
  inline bool has_server_ip() const;
  inline void clear_server_ip();
  static const int kServerIpFieldNumber = 4;
  inline const ::std::string& server_ip() const;
  inline void set_server_ip(const ::std::string& value);
  inline void set_server_ip(const char* value);
  inline void set_server_ip(const char* value, size_t size);
  inline ::std::string* mutable_server_ip();
  inline ::std::string* release_server_ip();
  
  // optional string server_name = 5;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 5;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const char* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  
  // repeated .ValueData value_data = 6;
  inline int value_data_size() const;
  inline void clear_value_data();
  static const int kValueDataFieldNumber = 6;
  inline const ::ValueData& value_data(int index) const;
  inline ::ValueData* mutable_value_data(int index);
  inline ::ValueData* add_value_data();
  inline const ::google::protobuf::RepeatedPtrField< ::ValueData >&
      value_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::ValueData >*
      mutable_value_data();
  
  // repeated .LogData log_data = 7;
  inline int log_data_size() const;
  inline void clear_log_data();
  static const int kLogDataFieldNumber = 7;
  inline const ::LogData& log_data(int index) const;
  inline ::LogData* mutable_log_data(int index);
  inline ::LogData* add_log_data();
  inline const ::google::protobuf::RepeatedPtrField< ::LogData >&
      log_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::LogData >*
      mutable_log_data();
  
  // repeated .FruData fru_data = 8;
  inline int fru_data_size() const;
  inline void clear_fru_data();
  static const int kFruDataFieldNumber = 8;
  inline const ::FruData& fru_data(int index) const;
  inline ::FruData* mutable_fru_data(int index);
  inline ::FruData* add_fru_data();
  inline const ::google::protobuf::RepeatedPtrField< ::FruData >&
      fru_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::FruData >*
      mutable_fru_data();
  
  // optional uint32 error_code = 9;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 9;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:CollectData)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_server_type();
  inline void clear_has_server_type();
  inline void set_has_collect_time();
  inline void clear_has_collect_time();
  inline void set_has_server_ip();
  inline void clear_has_server_ip();
  inline void set_has_server_name();
  inline void clear_has_server_name();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* server_id_;
  ::google::protobuf::uint32 server_type_;
  ::google::protobuf::uint32 collect_time_;
  ::std::string* server_ip_;
  ::std::string* server_name_;
  ::google::protobuf::RepeatedPtrField< ::ValueData > value_data_;
  ::google::protobuf::RepeatedPtrField< ::LogData > log_data_;
  ::google::protobuf::RepeatedPtrField< ::FruData > fru_data_;
  ::google::protobuf::uint32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_IPMIData_2eproto();
  friend void protobuf_AssignDesc_IPMIData_2eproto();
  friend void protobuf_ShutdownFile_IPMIData_2eproto();
  
  void InitAsDefaultInstance();
  static CollectData* default_instance_;
};
// ===================================================================


// ===================================================================

// ValueData

// required string sdr_name = 1;
inline bool ValueData::has_sdr_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ValueData::set_has_sdr_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ValueData::clear_has_sdr_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ValueData::clear_sdr_name() {
  if (sdr_name_ != &::google::protobuf::internal::kEmptyString) {
    sdr_name_->clear();
  }
  clear_has_sdr_name();
}
inline const ::std::string& ValueData::sdr_name() const {
  return *sdr_name_;
}
inline void ValueData::set_sdr_name(const ::std::string& value) {
  set_has_sdr_name();
  if (sdr_name_ == &::google::protobuf::internal::kEmptyString) {
    sdr_name_ = new ::std::string;
  }
  sdr_name_->assign(value);
}
inline void ValueData::set_sdr_name(const char* value) {
  set_has_sdr_name();
  if (sdr_name_ == &::google::protobuf::internal::kEmptyString) {
    sdr_name_ = new ::std::string;
  }
  sdr_name_->assign(value);
}
inline void ValueData::set_sdr_name(const char* value, size_t size) {
  set_has_sdr_name();
  if (sdr_name_ == &::google::protobuf::internal::kEmptyString) {
    sdr_name_ = new ::std::string;
  }
  sdr_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ValueData::mutable_sdr_name() {
  set_has_sdr_name();
  if (sdr_name_ == &::google::protobuf::internal::kEmptyString) {
    sdr_name_ = new ::std::string;
  }
  return sdr_name_;
}
inline ::std::string* ValueData::release_sdr_name() {
  clear_has_sdr_name();
  if (sdr_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sdr_name_;
    sdr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 sdr_num = 2;
inline bool ValueData::has_sdr_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ValueData::set_has_sdr_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ValueData::clear_has_sdr_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ValueData::clear_sdr_num() {
  sdr_num_ = 0u;
  clear_has_sdr_num();
}
inline ::google::protobuf::uint32 ValueData::sdr_num() const {
  return sdr_num_;
}
inline void ValueData::set_sdr_num(::google::protobuf::uint32 value) {
  set_has_sdr_num();
  sdr_num_ = value;
}

// required float value = 3;
inline bool ValueData::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ValueData::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ValueData::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ValueData::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float ValueData::value() const {
  return value_;
}
inline void ValueData::set_value(float value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// FruData

// required string fru_name = 1;
inline bool FruData::has_fru_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FruData::set_has_fru_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FruData::clear_has_fru_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FruData::clear_fru_name() {
  if (fru_name_ != &::google::protobuf::internal::kEmptyString) {
    fru_name_->clear();
  }
  clear_has_fru_name();
}
inline const ::std::string& FruData::fru_name() const {
  return *fru_name_;
}
inline void FruData::set_fru_name(const ::std::string& value) {
  set_has_fru_name();
  if (fru_name_ == &::google::protobuf::internal::kEmptyString) {
    fru_name_ = new ::std::string;
  }
  fru_name_->assign(value);
}
inline void FruData::set_fru_name(const char* value) {
  set_has_fru_name();
  if (fru_name_ == &::google::protobuf::internal::kEmptyString) {
    fru_name_ = new ::std::string;
  }
  fru_name_->assign(value);
}
inline void FruData::set_fru_name(const char* value, size_t size) {
  set_has_fru_name();
  if (fru_name_ == &::google::protobuf::internal::kEmptyString) {
    fru_name_ = new ::std::string;
  }
  fru_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FruData::mutable_fru_name() {
  set_has_fru_name();
  if (fru_name_ == &::google::protobuf::internal::kEmptyString) {
    fru_name_ = new ::std::string;
  }
  return fru_name_;
}
inline ::std::string* FruData::release_fru_name() {
  clear_has_fru_name();
  if (fru_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fru_name_;
    fru_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string value = 2;
inline bool FruData::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FruData::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FruData::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FruData::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& FruData::value() const {
  return *value_;
}
inline void FruData::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void FruData::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void FruData::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FruData::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* FruData::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogData

// required uint32 id = 1;
inline bool LogData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 LogData::id() const {
  return id_;
}
inline void LogData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 time = 2;
inline bool LogData::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogData::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogData::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogData::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 LogData::time() const {
  return time_;
}
inline void LogData::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required string content = 3;
inline bool LogData::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogData::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogData::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogData::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& LogData::content() const {
  return *content_;
}
inline void LogData::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void LogData::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void LogData::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogData::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* LogData::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CollectData

// required string server_id = 1;
inline bool CollectData::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CollectData::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CollectData::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CollectData::clear_server_id() {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    server_id_->clear();
  }
  clear_has_server_id();
}
inline const ::std::string& CollectData::server_id() const {
  return *server_id_;
}
inline void CollectData::set_server_id(const ::std::string& value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void CollectData::set_server_id(const char* value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void CollectData::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CollectData::mutable_server_id() {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  return server_id_;
}
inline ::std::string* CollectData::release_server_id() {
  clear_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_id_;
    server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 server_type = 2;
inline bool CollectData::has_server_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CollectData::set_has_server_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CollectData::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CollectData::clear_server_type() {
  server_type_ = 0u;
  clear_has_server_type();
}
inline ::google::protobuf::uint32 CollectData::server_type() const {
  return server_type_;
}
inline void CollectData::set_server_type(::google::protobuf::uint32 value) {
  set_has_server_type();
  server_type_ = value;
}

// required uint32 collect_time = 3;
inline bool CollectData::has_collect_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CollectData::set_has_collect_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CollectData::clear_has_collect_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CollectData::clear_collect_time() {
  collect_time_ = 0u;
  clear_has_collect_time();
}
inline ::google::protobuf::uint32 CollectData::collect_time() const {
  return collect_time_;
}
inline void CollectData::set_collect_time(::google::protobuf::uint32 value) {
  set_has_collect_time();
  collect_time_ = value;
}

// optional string server_ip = 4;
inline bool CollectData::has_server_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CollectData::set_has_server_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CollectData::clear_has_server_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CollectData::clear_server_ip() {
  if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
    server_ip_->clear();
  }
  clear_has_server_ip();
}
inline const ::std::string& CollectData::server_ip() const {
  return *server_ip_;
}
inline void CollectData::set_server_ip(const ::std::string& value) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(value);
}
inline void CollectData::set_server_ip(const char* value) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(value);
}
inline void CollectData::set_server_ip(const char* value, size_t size) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CollectData::mutable_server_ip() {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  return server_ip_;
}
inline ::std::string* CollectData::release_server_ip() {
  clear_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_ip_;
    server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string server_name = 5;
inline bool CollectData::has_server_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CollectData::set_has_server_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CollectData::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CollectData::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& CollectData::server_name() const {
  return *server_name_;
}
inline void CollectData::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void CollectData::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void CollectData::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CollectData::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}
inline ::std::string* CollectData::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .ValueData value_data = 6;
inline int CollectData::value_data_size() const {
  return value_data_.size();
}
inline void CollectData::clear_value_data() {
  value_data_.Clear();
}
inline const ::ValueData& CollectData::value_data(int index) const {
  return value_data_.Get(index);
}
inline ::ValueData* CollectData::mutable_value_data(int index) {
  return value_data_.Mutable(index);
}
inline ::ValueData* CollectData::add_value_data() {
  return value_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ValueData >&
CollectData::value_data() const {
  return value_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::ValueData >*
CollectData::mutable_value_data() {
  return &value_data_;
}

// repeated .LogData log_data = 7;
inline int CollectData::log_data_size() const {
  return log_data_.size();
}
inline void CollectData::clear_log_data() {
  log_data_.Clear();
}
inline const ::LogData& CollectData::log_data(int index) const {
  return log_data_.Get(index);
}
inline ::LogData* CollectData::mutable_log_data(int index) {
  return log_data_.Mutable(index);
}
inline ::LogData* CollectData::add_log_data() {
  return log_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LogData >&
CollectData::log_data() const {
  return log_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::LogData >*
CollectData::mutable_log_data() {
  return &log_data_;
}

// repeated .FruData fru_data = 8;
inline int CollectData::fru_data_size() const {
  return fru_data_.size();
}
inline void CollectData::clear_fru_data() {
  fru_data_.Clear();
}
inline const ::FruData& CollectData::fru_data(int index) const {
  return fru_data_.Get(index);
}
inline ::FruData* CollectData::mutable_fru_data(int index) {
  return fru_data_.Mutable(index);
}
inline ::FruData* CollectData::add_fru_data() {
  return fru_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FruData >&
CollectData::fru_data() const {
  return fru_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::FruData >*
CollectData::mutable_fru_data() {
  return &fru_data_;
}

// optional uint32 error_code = 9;
inline bool CollectData::has_error_code() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CollectData::set_has_error_code() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CollectData::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CollectData::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 CollectData::error_code() const {
  return error_code_;
}
inline void CollectData::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IPMIData_2eproto__INCLUDED
