// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SNMPData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* KV_UINT64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KV_UINT64_reflection_ = NULL;
const ::google::protobuf::Descriptor* KV_STRING_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KV_STRING_reflection_ = NULL;
const ::google::protobuf::Descriptor* IfData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IfData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiskData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Raid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Raid_reflection_ = NULL;
const ::google::protobuf::Descriptor* PD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PD_reflection_ = NULL;
const ::google::protobuf::Descriptor* VD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VD_reflection_ = NULL;
const ::google::protobuf::Descriptor* StorageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StorageData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SNMPData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SNMPData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SNMPData_2eproto() {
  protobuf_AddDesc_SNMPData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SNMPData.proto");
  GOOGLE_CHECK(file != NULL);
  KV_UINT64_descriptor_ = file->message_type(0);
  static const int KV_UINT64_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KV_UINT64, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KV_UINT64, value_),
  };
  KV_UINT64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KV_UINT64_descriptor_,
      KV_UINT64::default_instance_,
      KV_UINT64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KV_UINT64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KV_UINT64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KV_UINT64));
  KV_STRING_descriptor_ = file->message_type(1);
  static const int KV_STRING_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KV_STRING, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KV_STRING, value_),
  };
  KV_STRING_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KV_STRING_descriptor_,
      KV_STRING::default_instance_,
      KV_STRING_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KV_STRING, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KV_STRING, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KV_STRING));
  IfData_descriptor_ = file->message_type(2);
  static const int IfData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IfData, uint64_kv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IfData, string_kv_),
  };
  IfData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IfData_descriptor_,
      IfData::default_instance_,
      IfData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IfData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IfData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IfData));
  DiskData_descriptor_ = file->message_type(3);
  static const int DiskData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskData, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskData, uint64_kv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskData, string_kv_),
  };
  DiskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiskData_descriptor_,
      DiskData::default_instance_,
      DiskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiskData));
  ProcData_descriptor_ = file->message_type(4);
  static const int ProcData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcData, uint64_kv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcData, string_kv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcData, if_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcData, disk_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcData, storage_info_),
  };
  ProcData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcData_descriptor_,
      ProcData::default_instance_,
      ProcData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcData));
  Raid_descriptor_ = file->message_type(5);
  static const int Raid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Raid, uint64_kv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Raid, string_kv_),
  };
  Raid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Raid_descriptor_,
      Raid::default_instance_,
      Raid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Raid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Raid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Raid));
  PD_descriptor_ = file->message_type(6);
  static const int PD_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PD, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PD, uint64_kv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PD, string_kv_),
  };
  PD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PD_descriptor_,
      PD::default_instance_,
      PD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PD));
  VD_descriptor_ = file->message_type(7);
  static const int VD_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VD, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VD, uint64_kv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VD, string_kv_),
  };
  VD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VD_descriptor_,
      VD::default_instance_,
      VD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VD));
  StorageData_descriptor_ = file->message_type(8);
  static const int StorageData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageData, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageData, uint64_kv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageData, string_kv_),
  };
  StorageData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StorageData_descriptor_,
      StorageData::default_instance_,
      StorageData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StorageData));
  SNMPData_descriptor_ = file->message_type(9);
  static const int SNMPData_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNMPData, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNMPData, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNMPData, os_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNMPData, collect_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNMPData, server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNMPData, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNMPData, mib_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNMPData, raid_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNMPData, pd_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNMPData, vd_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNMPData, proc_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNMPData, ssd_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNMPData, proc_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNMPData, raid_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNMPData, ssd_error_),
  };
  SNMPData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SNMPData_descriptor_,
      SNMPData::default_instance_,
      SNMPData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNMPData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNMPData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SNMPData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SNMPData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KV_UINT64_descriptor_, &KV_UINT64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KV_STRING_descriptor_, &KV_STRING::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IfData_descriptor_, &IfData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiskData_descriptor_, &DiskData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcData_descriptor_, &ProcData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Raid_descriptor_, &Raid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PD_descriptor_, &PD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VD_descriptor_, &VD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StorageData_descriptor_, &StorageData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SNMPData_descriptor_, &SNMPData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SNMPData_2eproto() {
  delete KV_UINT64::default_instance_;
  delete KV_UINT64_reflection_;
  delete KV_STRING::default_instance_;
  delete KV_STRING_reflection_;
  delete IfData::default_instance_;
  delete IfData_reflection_;
  delete DiskData::default_instance_;
  delete DiskData_reflection_;
  delete ProcData::default_instance_;
  delete ProcData_reflection_;
  delete Raid::default_instance_;
  delete Raid_reflection_;
  delete PD::default_instance_;
  delete PD_reflection_;
  delete VD::default_instance_;
  delete VD_reflection_;
  delete StorageData::default_instance_;
  delete StorageData_reflection_;
  delete SNMPData::default_instance_;
  delete SNMPData_reflection_;
}

void protobuf_AddDesc_SNMPData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016SNMPData.proto\"(\n\tKV_UINT64\022\014\n\004name\030\001 "
    "\001(\t\022\r\n\005value\030\002 \001(\004\"(\n\tKV_STRING\022\014\n\004name\030"
    "\001 \001(\t\022\r\n\005value\030\002 \001(\t\"F\n\006IfData\022\035\n\tuint64"
    "_kv\030\001 \003(\0132\n.KV_UINT64\022\035\n\tstring_kv\030\002 \003(\013"
    "2\n.KV_STRING\"W\n\010DiskData\022\r\n\005index\030\001 \002(\r\022"
    "\035\n\tuint64_kv\030\002 \003(\0132\n.KV_UINT64\022\035\n\tstring"
    "_kv\030\003 \003(\0132\n.KV_STRING\"\244\001\n\010ProcData\022\035\n\tui"
    "nt64_kv\030\001 \003(\0132\n.KV_UINT64\022\035\n\tstring_kv\030\002"
    " \003(\0132\n.KV_STRING\022\030\n\007if_info\030\003 \003(\0132\007.IfDa"
    "ta\022\034\n\tdisk_info\030\004 \003(\0132\t.DiskData\022\"\n\014stor"
    "age_info\030\005 \003(\0132\014.StorageData\"D\n\004Raid\022\035\n\t"
    "uint64_kv\030\001 \003(\0132\n.KV_UINT64\022\035\n\tstring_kv"
    "\030\002 \003(\0132\n.KV_STRING\"Q\n\002PD\022\r\n\005index\030\001 \002(\r\022"
    "\035\n\tuint64_kv\030\002 \003(\0132\n.KV_UINT64\022\035\n\tstring"
    "_kv\030\003 \003(\0132\n.KV_STRING\"Q\n\002VD\022\r\n\005index\030\001 \002"
    "(\r\022\035\n\tuint64_kv\030\002 \003(\0132\n.KV_UINT64\022\035\n\tstr"
    "ing_kv\030\003 \003(\0132\n.KV_STRING\"Z\n\013StorageData\022"
    "\r\n\005index\030\001 \002(\r\022\035\n\tuint64_kv\030\002 \003(\0132\n.KV_U"
    "INT64\022\035\n\tstring_kv\030\003 \003(\0132\n.KV_STRING\"\304\002\n"
    "\010SNMPData\022\021\n\tserver_id\030\001 \002(\t\022\023\n\013server_t"
    "ype\030\002 \002(\r\022\017\n\007os_type\030\003 \002(\r\022\024\n\014collect_ti"
    "me\030\004 \002(\r\022\021\n\tserver_ip\030\005 \001(\t\022\023\n\013server_na"
    "me\030\006 \001(\t\022\020\n\010mib_type\030\007 \002(\r\022\030\n\traid_info\030"
    "\010 \003(\0132\005.Raid\022\024\n\007pd_info\030\t \003(\0132\003.PD\022\024\n\007vd"
    "_info\030\n \003(\0132\003.VD\022\034\n\tproc_data\030\013 \001(\0132\t.Pr"
    "ocData\022\020\n\010ssd_data\030\014 \001(\t\022\022\n\nproc_error\030\r"
    " \001(\r\022\022\n\nraid_error\030\016 \001(\r\022\021\n\tssd_error\030\017 "
    "\001(\r", 1083);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SNMPData.proto", &protobuf_RegisterTypes);
  KV_UINT64::default_instance_ = new KV_UINT64();
  KV_STRING::default_instance_ = new KV_STRING();
  IfData::default_instance_ = new IfData();
  DiskData::default_instance_ = new DiskData();
  ProcData::default_instance_ = new ProcData();
  Raid::default_instance_ = new Raid();
  PD::default_instance_ = new PD();
  VD::default_instance_ = new VD();
  StorageData::default_instance_ = new StorageData();
  SNMPData::default_instance_ = new SNMPData();
  KV_UINT64::default_instance_->InitAsDefaultInstance();
  KV_STRING::default_instance_->InitAsDefaultInstance();
  IfData::default_instance_->InitAsDefaultInstance();
  DiskData::default_instance_->InitAsDefaultInstance();
  ProcData::default_instance_->InitAsDefaultInstance();
  Raid::default_instance_->InitAsDefaultInstance();
  PD::default_instance_->InitAsDefaultInstance();
  VD::default_instance_->InitAsDefaultInstance();
  StorageData::default_instance_->InitAsDefaultInstance();
  SNMPData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SNMPData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SNMPData_2eproto {
  StaticDescriptorInitializer_SNMPData_2eproto() {
    protobuf_AddDesc_SNMPData_2eproto();
  }
} static_descriptor_initializer_SNMPData_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int KV_UINT64::kNameFieldNumber;
const int KV_UINT64::kValueFieldNumber;
#endif  // !_MSC_VER

KV_UINT64::KV_UINT64()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KV_UINT64::InitAsDefaultInstance() {
}

KV_UINT64::KV_UINT64(const KV_UINT64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KV_UINT64::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KV_UINT64::~KV_UINT64() {
  SharedDtor();
}

void KV_UINT64::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void KV_UINT64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KV_UINT64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KV_UINT64_descriptor_;
}

const KV_UINT64& KV_UINT64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SNMPData_2eproto();  return *default_instance_;
}

KV_UINT64* KV_UINT64::default_instance_ = NULL;

KV_UINT64* KV_UINT64::New() const {
  return new KV_UINT64;
}

void KV_UINT64::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KV_UINT64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional uint64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KV_UINT64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional uint64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KV_UINT64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional uint64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KV_UINT64::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional uint64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KV_UINT64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KV_UINT64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KV_UINT64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KV_UINT64::MergeFrom(const KV_UINT64& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KV_UINT64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KV_UINT64::CopyFrom(const KV_UINT64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KV_UINT64::IsInitialized() const {
  
  return true;
}

void KV_UINT64::Swap(KV_UINT64* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KV_UINT64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KV_UINT64_descriptor_;
  metadata.reflection = KV_UINT64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KV_STRING::kNameFieldNumber;
const int KV_STRING::kValueFieldNumber;
#endif  // !_MSC_VER

KV_STRING::KV_STRING()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KV_STRING::InitAsDefaultInstance() {
}

KV_STRING::KV_STRING(const KV_STRING& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KV_STRING::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KV_STRING::~KV_STRING() {
  SharedDtor();
}

void KV_STRING::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void KV_STRING::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KV_STRING::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KV_STRING_descriptor_;
}

const KV_STRING& KV_STRING::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SNMPData_2eproto();  return *default_instance_;
}

KV_STRING* KV_STRING::default_instance_ = NULL;

KV_STRING* KV_STRING::New() const {
  return new KV_STRING;
}

void KV_STRING::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KV_STRING::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KV_STRING::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KV_STRING::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KV_STRING::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KV_STRING::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KV_STRING* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KV_STRING*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KV_STRING::MergeFrom(const KV_STRING& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KV_STRING::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KV_STRING::CopyFrom(const KV_STRING& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KV_STRING::IsInitialized() const {
  
  return true;
}

void KV_STRING::Swap(KV_STRING* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KV_STRING::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KV_STRING_descriptor_;
  metadata.reflection = KV_STRING_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IfData::kUint64KvFieldNumber;
const int IfData::kStringKvFieldNumber;
#endif  // !_MSC_VER

IfData::IfData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IfData::InitAsDefaultInstance() {
}

IfData::IfData(const IfData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IfData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IfData::~IfData() {
  SharedDtor();
}

void IfData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IfData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IfData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IfData_descriptor_;
}

const IfData& IfData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SNMPData_2eproto();  return *default_instance_;
}

IfData* IfData::default_instance_ = NULL;

IfData* IfData::New() const {
  return new IfData;
}

void IfData::Clear() {
  uint64_kv_.Clear();
  string_kv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IfData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .KV_UINT64 uint64_kv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uint64_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uint64_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_uint64_kv;
        if (input->ExpectTag(18)) goto parse_string_kv;
        break;
      }
      
      // repeated .KV_STRING string_kv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_string_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_string_kv;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IfData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .KV_UINT64 uint64_kv = 1;
  for (int i = 0; i < this->uint64_kv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uint64_kv(i), output);
  }
  
  // repeated .KV_STRING string_kv = 2;
  for (int i = 0; i < this->string_kv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->string_kv(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IfData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .KV_UINT64 uint64_kv = 1;
  for (int i = 0; i < this->uint64_kv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uint64_kv(i), target);
  }
  
  // repeated .KV_STRING string_kv = 2;
  for (int i = 0; i < this->string_kv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->string_kv(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IfData::ByteSize() const {
  int total_size = 0;
  
  // repeated .KV_UINT64 uint64_kv = 1;
  total_size += 1 * this->uint64_kv_size();
  for (int i = 0; i < this->uint64_kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uint64_kv(i));
  }
  
  // repeated .KV_STRING string_kv = 2;
  total_size += 1 * this->string_kv_size();
  for (int i = 0; i < this->string_kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->string_kv(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IfData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IfData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IfData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IfData::MergeFrom(const IfData& from) {
  GOOGLE_CHECK_NE(&from, this);
  uint64_kv_.MergeFrom(from.uint64_kv_);
  string_kv_.MergeFrom(from.string_kv_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IfData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IfData::CopyFrom(const IfData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IfData::IsInitialized() const {
  
  return true;
}

void IfData::Swap(IfData* other) {
  if (other != this) {
    uint64_kv_.Swap(&other->uint64_kv_);
    string_kv_.Swap(&other->string_kv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IfData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IfData_descriptor_;
  metadata.reflection = IfData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiskData::kIndexFieldNumber;
const int DiskData::kUint64KvFieldNumber;
const int DiskData::kStringKvFieldNumber;
#endif  // !_MSC_VER

DiskData::DiskData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DiskData::InitAsDefaultInstance() {
}

DiskData::DiskData(const DiskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DiskData::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiskData::~DiskData() {
  SharedDtor();
}

void DiskData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiskData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiskData_descriptor_;
}

const DiskData& DiskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SNMPData_2eproto();  return *default_instance_;
}

DiskData* DiskData::default_instance_ = NULL;

DiskData* DiskData::New() const {
  return new DiskData;
}

void DiskData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
  }
  uint64_kv_.Clear();
  string_kv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uint64_kv;
        break;
      }
      
      // repeated .KV_UINT64 uint64_kv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uint64_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uint64_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uint64_kv;
        if (input->ExpectTag(26)) goto parse_string_kv;
        break;
      }
      
      // repeated .KV_STRING string_kv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_string_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_string_kv;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DiskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }
  
  // repeated .KV_UINT64 uint64_kv = 2;
  for (int i = 0; i < this->uint64_kv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uint64_kv(i), output);
  }
  
  // repeated .KV_STRING string_kv = 3;
  for (int i = 0; i < this->string_kv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->string_kv(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DiskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }
  
  // repeated .KV_UINT64 uint64_kv = 2;
  for (int i = 0; i < this->uint64_kv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uint64_kv(i), target);
  }
  
  // repeated .KV_STRING string_kv = 3;
  for (int i = 0; i < this->string_kv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->string_kv(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DiskData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
  }
  // repeated .KV_UINT64 uint64_kv = 2;
  total_size += 1 * this->uint64_kv_size();
  for (int i = 0; i < this->uint64_kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uint64_kv(i));
  }
  
  // repeated .KV_STRING string_kv = 3;
  total_size += 1 * this->string_kv_size();
  for (int i = 0; i < this->string_kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->string_kv(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiskData::MergeFrom(const DiskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  uint64_kv_.MergeFrom(from.uint64_kv_);
  string_kv_.MergeFrom(from.string_kv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiskData::CopyFrom(const DiskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DiskData::Swap(DiskData* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    uint64_kv_.Swap(&other->uint64_kv_);
    string_kv_.Swap(&other->string_kv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiskData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiskData_descriptor_;
  metadata.reflection = DiskData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcData::kUint64KvFieldNumber;
const int ProcData::kStringKvFieldNumber;
const int ProcData::kIfInfoFieldNumber;
const int ProcData::kDiskInfoFieldNumber;
const int ProcData::kStorageInfoFieldNumber;
#endif  // !_MSC_VER

ProcData::ProcData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcData::InitAsDefaultInstance() {
}

ProcData::ProcData(const ProcData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcData::~ProcData() {
  SharedDtor();
}

void ProcData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProcData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcData_descriptor_;
}

const ProcData& ProcData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SNMPData_2eproto();  return *default_instance_;
}

ProcData* ProcData::default_instance_ = NULL;

ProcData* ProcData::New() const {
  return new ProcData;
}

void ProcData::Clear() {
  uint64_kv_.Clear();
  string_kv_.Clear();
  if_info_.Clear();
  disk_info_.Clear();
  storage_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .KV_UINT64 uint64_kv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uint64_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uint64_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_uint64_kv;
        if (input->ExpectTag(18)) goto parse_string_kv;
        break;
      }
      
      // repeated .KV_STRING string_kv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_string_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_string_kv;
        if (input->ExpectTag(26)) goto parse_if_info;
        break;
      }
      
      // repeated .IfData if_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_if_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_if_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_if_info;
        if (input->ExpectTag(34)) goto parse_disk_info;
        break;
      }
      
      // repeated .DiskData disk_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disk_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_disk_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_disk_info;
        if (input->ExpectTag(42)) goto parse_storage_info;
        break;
      }
      
      // repeated .StorageData storage_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_storage_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_storage_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .KV_UINT64 uint64_kv = 1;
  for (int i = 0; i < this->uint64_kv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uint64_kv(i), output);
  }
  
  // repeated .KV_STRING string_kv = 2;
  for (int i = 0; i < this->string_kv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->string_kv(i), output);
  }
  
  // repeated .IfData if_info = 3;
  for (int i = 0; i < this->if_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->if_info(i), output);
  }
  
  // repeated .DiskData disk_info = 4;
  for (int i = 0; i < this->disk_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->disk_info(i), output);
  }
  
  // repeated .StorageData storage_info = 5;
  for (int i = 0; i < this->storage_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->storage_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .KV_UINT64 uint64_kv = 1;
  for (int i = 0; i < this->uint64_kv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uint64_kv(i), target);
  }
  
  // repeated .KV_STRING string_kv = 2;
  for (int i = 0; i < this->string_kv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->string_kv(i), target);
  }
  
  // repeated .IfData if_info = 3;
  for (int i = 0; i < this->if_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->if_info(i), target);
  }
  
  // repeated .DiskData disk_info = 4;
  for (int i = 0; i < this->disk_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->disk_info(i), target);
  }
  
  // repeated .StorageData storage_info = 5;
  for (int i = 0; i < this->storage_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->storage_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcData::ByteSize() const {
  int total_size = 0;
  
  // repeated .KV_UINT64 uint64_kv = 1;
  total_size += 1 * this->uint64_kv_size();
  for (int i = 0; i < this->uint64_kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uint64_kv(i));
  }
  
  // repeated .KV_STRING string_kv = 2;
  total_size += 1 * this->string_kv_size();
  for (int i = 0; i < this->string_kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->string_kv(i));
  }
  
  // repeated .IfData if_info = 3;
  total_size += 1 * this->if_info_size();
  for (int i = 0; i < this->if_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->if_info(i));
  }
  
  // repeated .DiskData disk_info = 4;
  total_size += 1 * this->disk_info_size();
  for (int i = 0; i < this->disk_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->disk_info(i));
  }
  
  // repeated .StorageData storage_info = 5;
  total_size += 1 * this->storage_info_size();
  for (int i = 0; i < this->storage_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->storage_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcData::MergeFrom(const ProcData& from) {
  GOOGLE_CHECK_NE(&from, this);
  uint64_kv_.MergeFrom(from.uint64_kv_);
  string_kv_.MergeFrom(from.string_kv_);
  if_info_.MergeFrom(from.if_info_);
  disk_info_.MergeFrom(from.disk_info_);
  storage_info_.MergeFrom(from.storage_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcData::CopyFrom(const ProcData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcData::IsInitialized() const {
  
  for (int i = 0; i < disk_info_size(); i++) {
    if (!this->disk_info(i).IsInitialized()) return false;
  }
  for (int i = 0; i < storage_info_size(); i++) {
    if (!this->storage_info(i).IsInitialized()) return false;
  }
  return true;
}

void ProcData::Swap(ProcData* other) {
  if (other != this) {
    uint64_kv_.Swap(&other->uint64_kv_);
    string_kv_.Swap(&other->string_kv_);
    if_info_.Swap(&other->if_info_);
    disk_info_.Swap(&other->disk_info_);
    storage_info_.Swap(&other->storage_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcData_descriptor_;
  metadata.reflection = ProcData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Raid::kUint64KvFieldNumber;
const int Raid::kStringKvFieldNumber;
#endif  // !_MSC_VER

Raid::Raid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Raid::InitAsDefaultInstance() {
}

Raid::Raid(const Raid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Raid::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Raid::~Raid() {
  SharedDtor();
}

void Raid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Raid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Raid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Raid_descriptor_;
}

const Raid& Raid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SNMPData_2eproto();  return *default_instance_;
}

Raid* Raid::default_instance_ = NULL;

Raid* Raid::New() const {
  return new Raid;
}

void Raid::Clear() {
  uint64_kv_.Clear();
  string_kv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Raid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .KV_UINT64 uint64_kv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uint64_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uint64_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_uint64_kv;
        if (input->ExpectTag(18)) goto parse_string_kv;
        break;
      }
      
      // repeated .KV_STRING string_kv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_string_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_string_kv;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Raid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .KV_UINT64 uint64_kv = 1;
  for (int i = 0; i < this->uint64_kv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uint64_kv(i), output);
  }
  
  // repeated .KV_STRING string_kv = 2;
  for (int i = 0; i < this->string_kv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->string_kv(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Raid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .KV_UINT64 uint64_kv = 1;
  for (int i = 0; i < this->uint64_kv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uint64_kv(i), target);
  }
  
  // repeated .KV_STRING string_kv = 2;
  for (int i = 0; i < this->string_kv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->string_kv(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Raid::ByteSize() const {
  int total_size = 0;
  
  // repeated .KV_UINT64 uint64_kv = 1;
  total_size += 1 * this->uint64_kv_size();
  for (int i = 0; i < this->uint64_kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uint64_kv(i));
  }
  
  // repeated .KV_STRING string_kv = 2;
  total_size += 1 * this->string_kv_size();
  for (int i = 0; i < this->string_kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->string_kv(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Raid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Raid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Raid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Raid::MergeFrom(const Raid& from) {
  GOOGLE_CHECK_NE(&from, this);
  uint64_kv_.MergeFrom(from.uint64_kv_);
  string_kv_.MergeFrom(from.string_kv_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Raid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Raid::CopyFrom(const Raid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Raid::IsInitialized() const {
  
  return true;
}

void Raid::Swap(Raid* other) {
  if (other != this) {
    uint64_kv_.Swap(&other->uint64_kv_);
    string_kv_.Swap(&other->string_kv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Raid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Raid_descriptor_;
  metadata.reflection = Raid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PD::kIndexFieldNumber;
const int PD::kUint64KvFieldNumber;
const int PD::kStringKvFieldNumber;
#endif  // !_MSC_VER

PD::PD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PD::InitAsDefaultInstance() {
}

PD::PD(const PD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PD::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PD::~PD() {
  SharedDtor();
}

void PD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PD_descriptor_;
}

const PD& PD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SNMPData_2eproto();  return *default_instance_;
}

PD* PD::default_instance_ = NULL;

PD* PD::New() const {
  return new PD;
}

void PD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
  }
  uint64_kv_.Clear();
  string_kv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uint64_kv;
        break;
      }
      
      // repeated .KV_UINT64 uint64_kv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uint64_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uint64_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uint64_kv;
        if (input->ExpectTag(26)) goto parse_string_kv;
        break;
      }
      
      // repeated .KV_STRING string_kv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_string_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_string_kv;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }
  
  // repeated .KV_UINT64 uint64_kv = 2;
  for (int i = 0; i < this->uint64_kv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uint64_kv(i), output);
  }
  
  // repeated .KV_STRING string_kv = 3;
  for (int i = 0; i < this->string_kv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->string_kv(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }
  
  // repeated .KV_UINT64 uint64_kv = 2;
  for (int i = 0; i < this->uint64_kv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uint64_kv(i), target);
  }
  
  // repeated .KV_STRING string_kv = 3;
  for (int i = 0; i < this->string_kv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->string_kv(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PD::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
  }
  // repeated .KV_UINT64 uint64_kv = 2;
  total_size += 1 * this->uint64_kv_size();
  for (int i = 0; i < this->uint64_kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uint64_kv(i));
  }
  
  // repeated .KV_STRING string_kv = 3;
  total_size += 1 * this->string_kv_size();
  for (int i = 0; i < this->string_kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->string_kv(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PD::MergeFrom(const PD& from) {
  GOOGLE_CHECK_NE(&from, this);
  uint64_kv_.MergeFrom(from.uint64_kv_);
  string_kv_.MergeFrom(from.string_kv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PD::CopyFrom(const PD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PD::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PD::Swap(PD* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    uint64_kv_.Swap(&other->uint64_kv_);
    string_kv_.Swap(&other->string_kv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PD_descriptor_;
  metadata.reflection = PD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VD::kIndexFieldNumber;
const int VD::kUint64KvFieldNumber;
const int VD::kStringKvFieldNumber;
#endif  // !_MSC_VER

VD::VD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VD::InitAsDefaultInstance() {
}

VD::VD(const VD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VD::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VD::~VD() {
  SharedDtor();
}

void VD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VD_descriptor_;
}

const VD& VD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SNMPData_2eproto();  return *default_instance_;
}

VD* VD::default_instance_ = NULL;

VD* VD::New() const {
  return new VD;
}

void VD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
  }
  uint64_kv_.Clear();
  string_kv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uint64_kv;
        break;
      }
      
      // repeated .KV_UINT64 uint64_kv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uint64_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uint64_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uint64_kv;
        if (input->ExpectTag(26)) goto parse_string_kv;
        break;
      }
      
      // repeated .KV_STRING string_kv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_string_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_string_kv;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }
  
  // repeated .KV_UINT64 uint64_kv = 2;
  for (int i = 0; i < this->uint64_kv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uint64_kv(i), output);
  }
  
  // repeated .KV_STRING string_kv = 3;
  for (int i = 0; i < this->string_kv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->string_kv(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }
  
  // repeated .KV_UINT64 uint64_kv = 2;
  for (int i = 0; i < this->uint64_kv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uint64_kv(i), target);
  }
  
  // repeated .KV_STRING string_kv = 3;
  for (int i = 0; i < this->string_kv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->string_kv(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VD::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
  }
  // repeated .KV_UINT64 uint64_kv = 2;
  total_size += 1 * this->uint64_kv_size();
  for (int i = 0; i < this->uint64_kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uint64_kv(i));
  }
  
  // repeated .KV_STRING string_kv = 3;
  total_size += 1 * this->string_kv_size();
  for (int i = 0; i < this->string_kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->string_kv(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VD::MergeFrom(const VD& from) {
  GOOGLE_CHECK_NE(&from, this);
  uint64_kv_.MergeFrom(from.uint64_kv_);
  string_kv_.MergeFrom(from.string_kv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VD::CopyFrom(const VD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VD::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void VD::Swap(VD* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    uint64_kv_.Swap(&other->uint64_kv_);
    string_kv_.Swap(&other->string_kv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VD_descriptor_;
  metadata.reflection = VD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StorageData::kIndexFieldNumber;
const int StorageData::kUint64KvFieldNumber;
const int StorageData::kStringKvFieldNumber;
#endif  // !_MSC_VER

StorageData::StorageData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StorageData::InitAsDefaultInstance() {
}

StorageData::StorageData(const StorageData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StorageData::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorageData::~StorageData() {
  SharedDtor();
}

void StorageData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StorageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageData_descriptor_;
}

const StorageData& StorageData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SNMPData_2eproto();  return *default_instance_;
}

StorageData* StorageData::default_instance_ = NULL;

StorageData* StorageData::New() const {
  return new StorageData;
}

void StorageData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
  }
  uint64_kv_.Clear();
  string_kv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StorageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uint64_kv;
        break;
      }
      
      // repeated .KV_UINT64 uint64_kv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uint64_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uint64_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uint64_kv;
        if (input->ExpectTag(26)) goto parse_string_kv;
        break;
      }
      
      // repeated .KV_STRING string_kv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_string_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_string_kv;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StorageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }
  
  // repeated .KV_UINT64 uint64_kv = 2;
  for (int i = 0; i < this->uint64_kv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uint64_kv(i), output);
  }
  
  // repeated .KV_STRING string_kv = 3;
  for (int i = 0; i < this->string_kv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->string_kv(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StorageData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }
  
  // repeated .KV_UINT64 uint64_kv = 2;
  for (int i = 0; i < this->uint64_kv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uint64_kv(i), target);
  }
  
  // repeated .KV_STRING string_kv = 3;
  for (int i = 0; i < this->string_kv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->string_kv(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StorageData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
  }
  // repeated .KV_UINT64 uint64_kv = 2;
  total_size += 1 * this->uint64_kv_size();
  for (int i = 0; i < this->uint64_kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uint64_kv(i));
  }
  
  // repeated .KV_STRING string_kv = 3;
  total_size += 1 * this->string_kv_size();
  for (int i = 0; i < this->string_kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->string_kv(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StorageData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StorageData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StorageData::MergeFrom(const StorageData& from) {
  GOOGLE_CHECK_NE(&from, this);
  uint64_kv_.MergeFrom(from.uint64_kv_);
  string_kv_.MergeFrom(from.string_kv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StorageData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageData::CopyFrom(const StorageData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void StorageData::Swap(StorageData* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    uint64_kv_.Swap(&other->uint64_kv_);
    string_kv_.Swap(&other->string_kv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StorageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StorageData_descriptor_;
  metadata.reflection = StorageData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SNMPData::kServerIdFieldNumber;
const int SNMPData::kServerTypeFieldNumber;
const int SNMPData::kOsTypeFieldNumber;
const int SNMPData::kCollectTimeFieldNumber;
const int SNMPData::kServerIpFieldNumber;
const int SNMPData::kServerNameFieldNumber;
const int SNMPData::kMibTypeFieldNumber;
const int SNMPData::kRaidInfoFieldNumber;
const int SNMPData::kPdInfoFieldNumber;
const int SNMPData::kVdInfoFieldNumber;
const int SNMPData::kProcDataFieldNumber;
const int SNMPData::kSsdDataFieldNumber;
const int SNMPData::kProcErrorFieldNumber;
const int SNMPData::kRaidErrorFieldNumber;
const int SNMPData::kSsdErrorFieldNumber;
#endif  // !_MSC_VER

SNMPData::SNMPData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SNMPData::InitAsDefaultInstance() {
  proc_data_ = const_cast< ::ProcData*>(&::ProcData::default_instance());
}

SNMPData::SNMPData(const SNMPData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SNMPData::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_type_ = 0u;
  os_type_ = 0u;
  collect_time_ = 0u;
  server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mib_type_ = 0u;
  proc_data_ = NULL;
  ssd_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proc_error_ = 0u;
  raid_error_ = 0u;
  ssd_error_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SNMPData::~SNMPData() {
  SharedDtor();
}

void SNMPData::SharedDtor() {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete server_ip_;
  }
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (ssd_data_ != &::google::protobuf::internal::kEmptyString) {
    delete ssd_data_;
  }
  if (this != default_instance_) {
    delete proc_data_;
  }
}

void SNMPData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SNMPData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SNMPData_descriptor_;
}

const SNMPData& SNMPData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SNMPData_2eproto();  return *default_instance_;
}

SNMPData* SNMPData::default_instance_ = NULL;

SNMPData* SNMPData::New() const {
  return new SNMPData;
}

void SNMPData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
    server_type_ = 0u;
    os_type_ = 0u;
    collect_time_ = 0u;
    if (has_server_ip()) {
      if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
        server_ip_->clear();
      }
    }
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    mib_type_ = 0u;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (has_proc_data()) {
      if (proc_data_ != NULL) proc_data_->::ProcData::Clear();
    }
    if (has_ssd_data()) {
      if (ssd_data_ != &::google::protobuf::internal::kEmptyString) {
        ssd_data_->clear();
      }
    }
    proc_error_ = 0u;
    raid_error_ = 0u;
    ssd_error_ = 0u;
  }
  raid_info_.Clear();
  pd_info_.Clear();
  vd_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SNMPData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_type;
        break;
      }
      
      // required uint32 server_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_type_)));
          set_has_server_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_os_type;
        break;
      }
      
      // required uint32 os_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_os_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &os_type_)));
          set_has_os_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_collect_time;
        break;
      }
      
      // required uint32 collect_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collect_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collect_time_)));
          set_has_collect_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_server_ip;
        break;
      }
      
      // optional string server_ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_ip().data(), this->server_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_server_name;
        break;
      }
      
      // optional string server_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mib_type;
        break;
      }
      
      // required uint32 mib_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mib_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mib_type_)));
          set_has_mib_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_raid_info;
        break;
      }
      
      // repeated .Raid raid_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raid_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_raid_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_raid_info;
        if (input->ExpectTag(74)) goto parse_pd_info;
        break;
      }
      
      // repeated .PD pd_info = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pd_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pd_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_pd_info;
        if (input->ExpectTag(82)) goto parse_vd_info;
        break;
      }
      
      // repeated .VD vd_info = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vd_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vd_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_vd_info;
        if (input->ExpectTag(90)) goto parse_proc_data;
        break;
      }
      
      // optional .ProcData proc_data = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proc_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proc_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ssd_data;
        break;
      }
      
      // optional string ssd_data = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ssd_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ssd_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ssd_data().data(), this->ssd_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_proc_error;
        break;
      }
      
      // optional uint32 proc_error = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proc_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_error_)));
          set_has_proc_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_raid_error;
        break;
      }
      
      // optional uint32 raid_error = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raid_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_error_)));
          set_has_raid_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_ssd_error;
        break;
      }
      
      // optional uint32 ssd_error = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ssd_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ssd_error_)));
          set_has_ssd_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SNMPData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server_id(), output);
  }
  
  // required uint32 server_type = 2;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_type(), output);
  }
  
  // required uint32 os_type = 3;
  if (has_os_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->os_type(), output);
  }
  
  // required uint32 collect_time = 4;
  if (has_collect_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->collect_time(), output);
  }
  
  // optional string server_ip = 5;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->server_ip(), output);
  }
  
  // optional string server_name = 6;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->server_name(), output);
  }
  
  // required uint32 mib_type = 7;
  if (has_mib_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->mib_type(), output);
  }
  
  // repeated .Raid raid_info = 8;
  for (int i = 0; i < this->raid_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->raid_info(i), output);
  }
  
  // repeated .PD pd_info = 9;
  for (int i = 0; i < this->pd_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->pd_info(i), output);
  }
  
  // repeated .VD vd_info = 10;
  for (int i = 0; i < this->vd_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->vd_info(i), output);
  }
  
  // optional .ProcData proc_data = 11;
  if (has_proc_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->proc_data(), output);
  }
  
  // optional string ssd_data = 12;
  if (has_ssd_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ssd_data().data(), this->ssd_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->ssd_data(), output);
  }
  
  // optional uint32 proc_error = 13;
  if (has_proc_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->proc_error(), output);
  }
  
  // optional uint32 raid_error = 14;
  if (has_raid_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->raid_error(), output);
  }
  
  // optional uint32 ssd_error = 15;
  if (has_ssd_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->ssd_error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SNMPData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_id(), target);
  }
  
  // required uint32 server_type = 2;
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_type(), target);
  }
  
  // required uint32 os_type = 3;
  if (has_os_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->os_type(), target);
  }
  
  // required uint32 collect_time = 4;
  if (has_collect_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->collect_time(), target);
  }
  
  // optional string server_ip = 5;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->server_ip(), target);
  }
  
  // optional string server_name = 6;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->server_name(), target);
  }
  
  // required uint32 mib_type = 7;
  if (has_mib_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->mib_type(), target);
  }
  
  // repeated .Raid raid_info = 8;
  for (int i = 0; i < this->raid_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->raid_info(i), target);
  }
  
  // repeated .PD pd_info = 9;
  for (int i = 0; i < this->pd_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->pd_info(i), target);
  }
  
  // repeated .VD vd_info = 10;
  for (int i = 0; i < this->vd_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->vd_info(i), target);
  }
  
  // optional .ProcData proc_data = 11;
  if (has_proc_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->proc_data(), target);
  }
  
  // optional string ssd_data = 12;
  if (has_ssd_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ssd_data().data(), this->ssd_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->ssd_data(), target);
  }
  
  // optional uint32 proc_error = 13;
  if (has_proc_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->proc_error(), target);
  }
  
  // optional uint32 raid_error = 14;
  if (has_raid_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->raid_error(), target);
  }
  
  // optional uint32 ssd_error = 15;
  if (has_ssd_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->ssd_error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SNMPData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }
    
    // required uint32 server_type = 2;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_type());
    }
    
    // required uint32 os_type = 3;
    if (has_os_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->os_type());
    }
    
    // required uint32 collect_time = 4;
    if (has_collect_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->collect_time());
    }
    
    // optional string server_ip = 5;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_ip());
    }
    
    // optional string server_name = 6;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }
    
    // required uint32 mib_type = 7;
    if (has_mib_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mib_type());
    }
    
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional .ProcData proc_data = 11;
    if (has_proc_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proc_data());
    }
    
    // optional string ssd_data = 12;
    if (has_ssd_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ssd_data());
    }
    
    // optional uint32 proc_error = 13;
    if (has_proc_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proc_error());
    }
    
    // optional uint32 raid_error = 14;
    if (has_raid_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_error());
    }
    
    // optional uint32 ssd_error = 15;
    if (has_ssd_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ssd_error());
    }
    
  }
  // repeated .Raid raid_info = 8;
  total_size += 1 * this->raid_info_size();
  for (int i = 0; i < this->raid_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->raid_info(i));
  }
  
  // repeated .PD pd_info = 9;
  total_size += 1 * this->pd_info_size();
  for (int i = 0; i < this->pd_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pd_info(i));
  }
  
  // repeated .VD vd_info = 10;
  total_size += 1 * this->vd_info_size();
  for (int i = 0; i < this->vd_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vd_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SNMPData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SNMPData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SNMPData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SNMPData::MergeFrom(const SNMPData& from) {
  GOOGLE_CHECK_NE(&from, this);
  raid_info_.MergeFrom(from.raid_info_);
  pd_info_.MergeFrom(from.pd_info_);
  vd_info_.MergeFrom(from.vd_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
    if (from.has_os_type()) {
      set_os_type(from.os_type());
    }
    if (from.has_collect_time()) {
      set_collect_time(from.collect_time());
    }
    if (from.has_server_ip()) {
      set_server_ip(from.server_ip());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_mib_type()) {
      set_mib_type(from.mib_type());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_proc_data()) {
      mutable_proc_data()->::ProcData::MergeFrom(from.proc_data());
    }
    if (from.has_ssd_data()) {
      set_ssd_data(from.ssd_data());
    }
    if (from.has_proc_error()) {
      set_proc_error(from.proc_error());
    }
    if (from.has_raid_error()) {
      set_raid_error(from.raid_error());
    }
    if (from.has_ssd_error()) {
      set_ssd_error(from.ssd_error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SNMPData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SNMPData::CopyFrom(const SNMPData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SNMPData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000004f) != 0x0000004f) return false;
  
  for (int i = 0; i < pd_info_size(); i++) {
    if (!this->pd_info(i).IsInitialized()) return false;
  }
  for (int i = 0; i < vd_info_size(); i++) {
    if (!this->vd_info(i).IsInitialized()) return false;
  }
  if (has_proc_data()) {
    if (!this->proc_data().IsInitialized()) return false;
  }
  return true;
}

void SNMPData::Swap(SNMPData* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(server_type_, other->server_type_);
    std::swap(os_type_, other->os_type_);
    std::swap(collect_time_, other->collect_time_);
    std::swap(server_ip_, other->server_ip_);
    std::swap(server_name_, other->server_name_);
    std::swap(mib_type_, other->mib_type_);
    raid_info_.Swap(&other->raid_info_);
    pd_info_.Swap(&other->pd_info_);
    vd_info_.Swap(&other->vd_info_);
    std::swap(proc_data_, other->proc_data_);
    std::swap(ssd_data_, other->ssd_data_);
    std::swap(proc_error_, other->proc_error_);
    std::swap(raid_error_, other->raid_error_);
    std::swap(ssd_error_, other->ssd_error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SNMPData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SNMPData_descriptor_;
  metadata.reflection = SNMPData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
