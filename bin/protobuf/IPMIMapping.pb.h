// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IPMIMapping.proto

#ifndef PROTOBUF_IPMIMapping_2eproto__INCLUDED
#define PROTOBUF_IPMIMapping_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IPMIMapping_2eproto();
void protobuf_AssignDesc_IPMIMapping_2eproto();
void protobuf_ShutdownFile_IPMIMapping_2eproto();

class Map;
class Action;

// ===================================================================

class Map : public ::google::protobuf::Message {
 public:
  Map();
  virtual ~Map();
  
  Map(const Map& from);
  
  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Map& default_instance();
  
  void Swap(Map* other);
  
  // implements Message ----------------------------------------------
  
  Map* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map& from);
  void MergeFrom(const Map& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 type_id = 1;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 1;
  inline ::google::protobuf::uint32 type_id() const;
  inline void set_type_id(::google::protobuf::uint32 value);
  
  // optional string column = 2;
  inline bool has_column() const;
  inline void clear_column();
  static const int kColumnFieldNumber = 2;
  inline const ::std::string& column() const;
  inline void set_column(const ::std::string& value);
  inline void set_column(const char* value);
  inline void set_column(const char* value, size_t size);
  inline ::std::string* mutable_column();
  inline ::std::string* release_column();
  
  // optional string sensor = 3;
  inline bool has_sensor() const;
  inline void clear_sensor();
  static const int kSensorFieldNumber = 3;
  inline const ::std::string& sensor() const;
  inline void set_sensor(const ::std::string& value);
  inline void set_sensor(const char* value);
  inline void set_sensor(const char* value, size_t size);
  inline ::std::string* mutable_sensor();
  inline ::std::string* release_sensor();
  
  // @@protoc_insertion_point(class_scope:Map)
 private:
  inline void set_has_type_id();
  inline void clear_has_type_id();
  inline void set_has_column();
  inline void clear_has_column();
  inline void set_has_sensor();
  inline void clear_has_sensor();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* column_;
  ::std::string* sensor_;
  ::google::protobuf::uint32 type_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_IPMIMapping_2eproto();
  friend void protobuf_AssignDesc_IPMIMapping_2eproto();
  friend void protobuf_ShutdownFile_IPMIMapping_2eproto();
  
  void InitAsDefaultInstance();
  static Map* default_instance_;
};
// -------------------------------------------------------------------

class Action : public ::google::protobuf::Message {
 public:
  Action();
  virtual ~Action();
  
  Action(const Action& from);
  
  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Action& default_instance();
  
  void Swap(Action* other);
  
  // implements Message ----------------------------------------------
  
  Action* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Map data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Map& data(int index) const;
  inline ::Map* mutable_data(int index);
  inline ::Map* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Map >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Map >*
      mutable_data();
  
  // required string act = 2;
  inline bool has_act() const;
  inline void clear_act();
  static const int kActFieldNumber = 2;
  inline const ::std::string& act() const;
  inline void set_act(const ::std::string& value);
  inline void set_act(const char* value);
  inline void set_act(const char* value, size_t size);
  inline ::std::string* mutable_act();
  inline ::std::string* release_act();
  
  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string token = 4;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 4;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  
  // optional uint32 collect_time = 5;
  inline bool has_collect_time() const;
  inline void clear_collect_time();
  static const int kCollectTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 collect_time() const;
  inline void set_collect_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:Action)
 private:
  inline void set_has_act();
  inline void clear_has_act();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_collect_time();
  inline void clear_has_collect_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Map > data_;
  ::std::string* act_;
  ::std::string* name_;
  ::std::string* token_;
  ::google::protobuf::uint32 collect_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_IPMIMapping_2eproto();
  friend void protobuf_AssignDesc_IPMIMapping_2eproto();
  friend void protobuf_ShutdownFile_IPMIMapping_2eproto();
  
  void InitAsDefaultInstance();
  static Action* default_instance_;
};
// ===================================================================


// ===================================================================

// Map

// required uint32 type_id = 1;
inline bool Map::has_type_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map::set_has_type_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map::clear_type_id() {
  type_id_ = 0u;
  clear_has_type_id();
}
inline ::google::protobuf::uint32 Map::type_id() const {
  return type_id_;
}
inline void Map::set_type_id(::google::protobuf::uint32 value) {
  set_has_type_id();
  type_id_ = value;
}

// optional string column = 2;
inline bool Map::has_column() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map::set_has_column() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map::clear_has_column() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map::clear_column() {
  if (column_ != &::google::protobuf::internal::kEmptyString) {
    column_->clear();
  }
  clear_has_column();
}
inline const ::std::string& Map::column() const {
  return *column_;
}
inline void Map::set_column(const ::std::string& value) {
  set_has_column();
  if (column_ == &::google::protobuf::internal::kEmptyString) {
    column_ = new ::std::string;
  }
  column_->assign(value);
}
inline void Map::set_column(const char* value) {
  set_has_column();
  if (column_ == &::google::protobuf::internal::kEmptyString) {
    column_ = new ::std::string;
  }
  column_->assign(value);
}
inline void Map::set_column(const char* value, size_t size) {
  set_has_column();
  if (column_ == &::google::protobuf::internal::kEmptyString) {
    column_ = new ::std::string;
  }
  column_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Map::mutable_column() {
  set_has_column();
  if (column_ == &::google::protobuf::internal::kEmptyString) {
    column_ = new ::std::string;
  }
  return column_;
}
inline ::std::string* Map::release_column() {
  clear_has_column();
  if (column_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = column_;
    column_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sensor = 3;
inline bool Map::has_sensor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Map::set_has_sensor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Map::clear_has_sensor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Map::clear_sensor() {
  if (sensor_ != &::google::protobuf::internal::kEmptyString) {
    sensor_->clear();
  }
  clear_has_sensor();
}
inline const ::std::string& Map::sensor() const {
  return *sensor_;
}
inline void Map::set_sensor(const ::std::string& value) {
  set_has_sensor();
  if (sensor_ == &::google::protobuf::internal::kEmptyString) {
    sensor_ = new ::std::string;
  }
  sensor_->assign(value);
}
inline void Map::set_sensor(const char* value) {
  set_has_sensor();
  if (sensor_ == &::google::protobuf::internal::kEmptyString) {
    sensor_ = new ::std::string;
  }
  sensor_->assign(value);
}
inline void Map::set_sensor(const char* value, size_t size) {
  set_has_sensor();
  if (sensor_ == &::google::protobuf::internal::kEmptyString) {
    sensor_ = new ::std::string;
  }
  sensor_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Map::mutable_sensor() {
  set_has_sensor();
  if (sensor_ == &::google::protobuf::internal::kEmptyString) {
    sensor_ = new ::std::string;
  }
  return sensor_;
}
inline ::std::string* Map::release_sensor() {
  clear_has_sensor();
  if (sensor_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sensor_;
    sensor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Action

// repeated .Map data = 1;
inline int Action::data_size() const {
  return data_.size();
}
inline void Action::clear_data() {
  data_.Clear();
}
inline const ::Map& Action::data(int index) const {
  return data_.Get(index);
}
inline ::Map* Action::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::Map* Action::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Map >&
Action::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Map >*
Action::mutable_data() {
  return &data_;
}

// required string act = 2;
inline bool Action::has_act() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Action::set_has_act() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Action::clear_has_act() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Action::clear_act() {
  if (act_ != &::google::protobuf::internal::kEmptyString) {
    act_->clear();
  }
  clear_has_act();
}
inline const ::std::string& Action::act() const {
  return *act_;
}
inline void Action::set_act(const ::std::string& value) {
  set_has_act();
  if (act_ == &::google::protobuf::internal::kEmptyString) {
    act_ = new ::std::string;
  }
  act_->assign(value);
}
inline void Action::set_act(const char* value) {
  set_has_act();
  if (act_ == &::google::protobuf::internal::kEmptyString) {
    act_ = new ::std::string;
  }
  act_->assign(value);
}
inline void Action::set_act(const char* value, size_t size) {
  set_has_act();
  if (act_ == &::google::protobuf::internal::kEmptyString) {
    act_ = new ::std::string;
  }
  act_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Action::mutable_act() {
  set_has_act();
  if (act_ == &::google::protobuf::internal::kEmptyString) {
    act_ = new ::std::string;
  }
  return act_;
}
inline ::std::string* Action::release_act() {
  clear_has_act();
  if (act_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = act_;
    act_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string name = 3;
inline bool Action::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Action::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Action::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Action::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Action::name() const {
  return *name_;
}
inline void Action::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Action::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Action::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Action::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Action::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string token = 4;
inline bool Action::has_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Action::set_has_token() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Action::clear_has_token() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Action::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& Action::token() const {
  return *token_;
}
inline void Action::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void Action::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void Action::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Action::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* Action::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 collect_time = 5;
inline bool Action::has_collect_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Action::set_has_collect_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Action::clear_has_collect_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Action::clear_collect_time() {
  collect_time_ = 0u;
  clear_has_collect_time();
}
inline ::google::protobuf::uint32 Action::collect_time() const {
  return collect_time_;
}
inline void Action::set_collect_time(::google::protobuf::uint32 value) {
  set_has_collect_time();
  collect_time_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IPMIMapping_2eproto__INCLUDED
