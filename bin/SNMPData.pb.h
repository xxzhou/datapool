// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SNMPData.proto

#ifndef PROTOBUF_SNMPData_2eproto__INCLUDED
#define PROTOBUF_SNMPData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SNMPData_2eproto();
void protobuf_AssignDesc_SNMPData_2eproto();
void protobuf_ShutdownFile_SNMPData_2eproto();

class KV_UINT64;
class KV_STRING;
class IfData;
class DiskData;
class ProcData;
class Raid;
class PD;
class VD;
class StorageData;
class SNMPData;

// ===================================================================

class KV_UINT64 : public ::google::protobuf::Message {
 public:
  KV_UINT64();
  virtual ~KV_UINT64();
  
  KV_UINT64(const KV_UINT64& from);
  
  inline KV_UINT64& operator=(const KV_UINT64& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KV_UINT64& default_instance();
  
  void Swap(KV_UINT64* other);
  
  // implements Message ----------------------------------------------
  
  KV_UINT64* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KV_UINT64& from);
  void MergeFrom(const KV_UINT64& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional uint64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint64 value() const;
  inline void set_value(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:KV_UINT64)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint64 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_SNMPData_2eproto();
  friend void protobuf_AssignDesc_SNMPData_2eproto();
  friend void protobuf_ShutdownFile_SNMPData_2eproto();
  
  void InitAsDefaultInstance();
  static KV_UINT64* default_instance_;
};
// -------------------------------------------------------------------

class KV_STRING : public ::google::protobuf::Message {
 public:
  KV_STRING();
  virtual ~KV_STRING();
  
  KV_STRING(const KV_STRING& from);
  
  inline KV_STRING& operator=(const KV_STRING& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KV_STRING& default_instance();
  
  void Swap(KV_STRING* other);
  
  // implements Message ----------------------------------------------
  
  KV_STRING* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KV_STRING& from);
  void MergeFrom(const KV_STRING& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:KV_STRING)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_SNMPData_2eproto();
  friend void protobuf_AssignDesc_SNMPData_2eproto();
  friend void protobuf_ShutdownFile_SNMPData_2eproto();
  
  void InitAsDefaultInstance();
  static KV_STRING* default_instance_;
};
// -------------------------------------------------------------------

class IfData : public ::google::protobuf::Message {
 public:
  IfData();
  virtual ~IfData();
  
  IfData(const IfData& from);
  
  inline IfData& operator=(const IfData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IfData& default_instance();
  
  void Swap(IfData* other);
  
  // implements Message ----------------------------------------------
  
  IfData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IfData& from);
  void MergeFrom(const IfData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .KV_UINT64 uint64_kv = 1;
  inline int uint64_kv_size() const;
  inline void clear_uint64_kv();
  static const int kUint64KvFieldNumber = 1;
  inline const ::KV_UINT64& uint64_kv(int index) const;
  inline ::KV_UINT64* mutable_uint64_kv(int index);
  inline ::KV_UINT64* add_uint64_kv();
  inline const ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >&
      uint64_kv() const;
  inline ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >*
      mutable_uint64_kv();
  
  // repeated .KV_STRING string_kv = 2;
  inline int string_kv_size() const;
  inline void clear_string_kv();
  static const int kStringKvFieldNumber = 2;
  inline const ::KV_STRING& string_kv(int index) const;
  inline ::KV_STRING* mutable_string_kv(int index);
  inline ::KV_STRING* add_string_kv();
  inline const ::google::protobuf::RepeatedPtrField< ::KV_STRING >&
      string_kv() const;
  inline ::google::protobuf::RepeatedPtrField< ::KV_STRING >*
      mutable_string_kv();
  
  // @@protoc_insertion_point(class_scope:IfData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::KV_UINT64 > uint64_kv_;
  ::google::protobuf::RepeatedPtrField< ::KV_STRING > string_kv_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_SNMPData_2eproto();
  friend void protobuf_AssignDesc_SNMPData_2eproto();
  friend void protobuf_ShutdownFile_SNMPData_2eproto();
  
  void InitAsDefaultInstance();
  static IfData* default_instance_;
};
// -------------------------------------------------------------------

class DiskData : public ::google::protobuf::Message {
 public:
  DiskData();
  virtual ~DiskData();
  
  DiskData(const DiskData& from);
  
  inline DiskData& operator=(const DiskData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiskData& default_instance();
  
  void Swap(DiskData* other);
  
  // implements Message ----------------------------------------------
  
  DiskData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DiskData& from);
  void MergeFrom(const DiskData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);
  
  // repeated .KV_UINT64 uint64_kv = 2;
  inline int uint64_kv_size() const;
  inline void clear_uint64_kv();
  static const int kUint64KvFieldNumber = 2;
  inline const ::KV_UINT64& uint64_kv(int index) const;
  inline ::KV_UINT64* mutable_uint64_kv(int index);
  inline ::KV_UINT64* add_uint64_kv();
  inline const ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >&
      uint64_kv() const;
  inline ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >*
      mutable_uint64_kv();
  
  // repeated .KV_STRING string_kv = 3;
  inline int string_kv_size() const;
  inline void clear_string_kv();
  static const int kStringKvFieldNumber = 3;
  inline const ::KV_STRING& string_kv(int index) const;
  inline ::KV_STRING* mutable_string_kv(int index);
  inline ::KV_STRING* add_string_kv();
  inline const ::google::protobuf::RepeatedPtrField< ::KV_STRING >&
      string_kv() const;
  inline ::google::protobuf::RepeatedPtrField< ::KV_STRING >*
      mutable_string_kv();
  
  // @@protoc_insertion_point(class_scope:DiskData)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::KV_UINT64 > uint64_kv_;
  ::google::protobuf::RepeatedPtrField< ::KV_STRING > string_kv_;
  ::google::protobuf::uint32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_SNMPData_2eproto();
  friend void protobuf_AssignDesc_SNMPData_2eproto();
  friend void protobuf_ShutdownFile_SNMPData_2eproto();
  
  void InitAsDefaultInstance();
  static DiskData* default_instance_;
};
// -------------------------------------------------------------------

class ProcData : public ::google::protobuf::Message {
 public:
  ProcData();
  virtual ~ProcData();
  
  ProcData(const ProcData& from);
  
  inline ProcData& operator=(const ProcData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcData& default_instance();
  
  void Swap(ProcData* other);
  
  // implements Message ----------------------------------------------
  
  ProcData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcData& from);
  void MergeFrom(const ProcData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .KV_UINT64 uint64_kv = 1;
  inline int uint64_kv_size() const;
  inline void clear_uint64_kv();
  static const int kUint64KvFieldNumber = 1;
  inline const ::KV_UINT64& uint64_kv(int index) const;
  inline ::KV_UINT64* mutable_uint64_kv(int index);
  inline ::KV_UINT64* add_uint64_kv();
  inline const ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >&
      uint64_kv() const;
  inline ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >*
      mutable_uint64_kv();
  
  // repeated .KV_STRING string_kv = 2;
  inline int string_kv_size() const;
  inline void clear_string_kv();
  static const int kStringKvFieldNumber = 2;
  inline const ::KV_STRING& string_kv(int index) const;
  inline ::KV_STRING* mutable_string_kv(int index);
  inline ::KV_STRING* add_string_kv();
  inline const ::google::protobuf::RepeatedPtrField< ::KV_STRING >&
      string_kv() const;
  inline ::google::protobuf::RepeatedPtrField< ::KV_STRING >*
      mutable_string_kv();
  
  // repeated .IfData if_info = 3;
  inline int if_info_size() const;
  inline void clear_if_info();
  static const int kIfInfoFieldNumber = 3;
  inline const ::IfData& if_info(int index) const;
  inline ::IfData* mutable_if_info(int index);
  inline ::IfData* add_if_info();
  inline const ::google::protobuf::RepeatedPtrField< ::IfData >&
      if_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::IfData >*
      mutable_if_info();
  
  // repeated .DiskData disk_info = 4;
  inline int disk_info_size() const;
  inline void clear_disk_info();
  static const int kDiskInfoFieldNumber = 4;
  inline const ::DiskData& disk_info(int index) const;
  inline ::DiskData* mutable_disk_info(int index);
  inline ::DiskData* add_disk_info();
  inline const ::google::protobuf::RepeatedPtrField< ::DiskData >&
      disk_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::DiskData >*
      mutable_disk_info();
  
  // repeated .StorageData storage_info = 5;
  inline int storage_info_size() const;
  inline void clear_storage_info();
  static const int kStorageInfoFieldNumber = 5;
  inline const ::StorageData& storage_info(int index) const;
  inline ::StorageData* mutable_storage_info(int index);
  inline ::StorageData* add_storage_info();
  inline const ::google::protobuf::RepeatedPtrField< ::StorageData >&
      storage_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::StorageData >*
      mutable_storage_info();
  
  // @@protoc_insertion_point(class_scope:ProcData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::KV_UINT64 > uint64_kv_;
  ::google::protobuf::RepeatedPtrField< ::KV_STRING > string_kv_;
  ::google::protobuf::RepeatedPtrField< ::IfData > if_info_;
  ::google::protobuf::RepeatedPtrField< ::DiskData > disk_info_;
  ::google::protobuf::RepeatedPtrField< ::StorageData > storage_info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_SNMPData_2eproto();
  friend void protobuf_AssignDesc_SNMPData_2eproto();
  friend void protobuf_ShutdownFile_SNMPData_2eproto();
  
  void InitAsDefaultInstance();
  static ProcData* default_instance_;
};
// -------------------------------------------------------------------

class Raid : public ::google::protobuf::Message {
 public:
  Raid();
  virtual ~Raid();
  
  Raid(const Raid& from);
  
  inline Raid& operator=(const Raid& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Raid& default_instance();
  
  void Swap(Raid* other);
  
  // implements Message ----------------------------------------------
  
  Raid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Raid& from);
  void MergeFrom(const Raid& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .KV_UINT64 uint64_kv = 1;
  inline int uint64_kv_size() const;
  inline void clear_uint64_kv();
  static const int kUint64KvFieldNumber = 1;
  inline const ::KV_UINT64& uint64_kv(int index) const;
  inline ::KV_UINT64* mutable_uint64_kv(int index);
  inline ::KV_UINT64* add_uint64_kv();
  inline const ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >&
      uint64_kv() const;
  inline ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >*
      mutable_uint64_kv();
  
  // repeated .KV_STRING string_kv = 2;
  inline int string_kv_size() const;
  inline void clear_string_kv();
  static const int kStringKvFieldNumber = 2;
  inline const ::KV_STRING& string_kv(int index) const;
  inline ::KV_STRING* mutable_string_kv(int index);
  inline ::KV_STRING* add_string_kv();
  inline const ::google::protobuf::RepeatedPtrField< ::KV_STRING >&
      string_kv() const;
  inline ::google::protobuf::RepeatedPtrField< ::KV_STRING >*
      mutable_string_kv();
  
  // @@protoc_insertion_point(class_scope:Raid)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::KV_UINT64 > uint64_kv_;
  ::google::protobuf::RepeatedPtrField< ::KV_STRING > string_kv_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_SNMPData_2eproto();
  friend void protobuf_AssignDesc_SNMPData_2eproto();
  friend void protobuf_ShutdownFile_SNMPData_2eproto();
  
  void InitAsDefaultInstance();
  static Raid* default_instance_;
};
// -------------------------------------------------------------------

class PD : public ::google::protobuf::Message {
 public:
  PD();
  virtual ~PD();
  
  PD(const PD& from);
  
  inline PD& operator=(const PD& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PD& default_instance();
  
  void Swap(PD* other);
  
  // implements Message ----------------------------------------------
  
  PD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PD& from);
  void MergeFrom(const PD& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);
  
  // repeated .KV_UINT64 uint64_kv = 2;
  inline int uint64_kv_size() const;
  inline void clear_uint64_kv();
  static const int kUint64KvFieldNumber = 2;
  inline const ::KV_UINT64& uint64_kv(int index) const;
  inline ::KV_UINT64* mutable_uint64_kv(int index);
  inline ::KV_UINT64* add_uint64_kv();
  inline const ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >&
      uint64_kv() const;
  inline ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >*
      mutable_uint64_kv();
  
  // repeated .KV_STRING string_kv = 3;
  inline int string_kv_size() const;
  inline void clear_string_kv();
  static const int kStringKvFieldNumber = 3;
  inline const ::KV_STRING& string_kv(int index) const;
  inline ::KV_STRING* mutable_string_kv(int index);
  inline ::KV_STRING* add_string_kv();
  inline const ::google::protobuf::RepeatedPtrField< ::KV_STRING >&
      string_kv() const;
  inline ::google::protobuf::RepeatedPtrField< ::KV_STRING >*
      mutable_string_kv();
  
  // @@protoc_insertion_point(class_scope:PD)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::KV_UINT64 > uint64_kv_;
  ::google::protobuf::RepeatedPtrField< ::KV_STRING > string_kv_;
  ::google::protobuf::uint32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_SNMPData_2eproto();
  friend void protobuf_AssignDesc_SNMPData_2eproto();
  friend void protobuf_ShutdownFile_SNMPData_2eproto();
  
  void InitAsDefaultInstance();
  static PD* default_instance_;
};
// -------------------------------------------------------------------

class VD : public ::google::protobuf::Message {
 public:
  VD();
  virtual ~VD();
  
  VD(const VD& from);
  
  inline VD& operator=(const VD& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VD& default_instance();
  
  void Swap(VD* other);
  
  // implements Message ----------------------------------------------
  
  VD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VD& from);
  void MergeFrom(const VD& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);
  
  // repeated .KV_UINT64 uint64_kv = 2;
  inline int uint64_kv_size() const;
  inline void clear_uint64_kv();
  static const int kUint64KvFieldNumber = 2;
  inline const ::KV_UINT64& uint64_kv(int index) const;
  inline ::KV_UINT64* mutable_uint64_kv(int index);
  inline ::KV_UINT64* add_uint64_kv();
  inline const ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >&
      uint64_kv() const;
  inline ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >*
      mutable_uint64_kv();
  
  // repeated .KV_STRING string_kv = 3;
  inline int string_kv_size() const;
  inline void clear_string_kv();
  static const int kStringKvFieldNumber = 3;
  inline const ::KV_STRING& string_kv(int index) const;
  inline ::KV_STRING* mutable_string_kv(int index);
  inline ::KV_STRING* add_string_kv();
  inline const ::google::protobuf::RepeatedPtrField< ::KV_STRING >&
      string_kv() const;
  inline ::google::protobuf::RepeatedPtrField< ::KV_STRING >*
      mutable_string_kv();
  
  // @@protoc_insertion_point(class_scope:VD)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::KV_UINT64 > uint64_kv_;
  ::google::protobuf::RepeatedPtrField< ::KV_STRING > string_kv_;
  ::google::protobuf::uint32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_SNMPData_2eproto();
  friend void protobuf_AssignDesc_SNMPData_2eproto();
  friend void protobuf_ShutdownFile_SNMPData_2eproto();
  
  void InitAsDefaultInstance();
  static VD* default_instance_;
};
// -------------------------------------------------------------------

class StorageData : public ::google::protobuf::Message {
 public:
  StorageData();
  virtual ~StorageData();
  
  StorageData(const StorageData& from);
  
  inline StorageData& operator=(const StorageData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageData& default_instance();
  
  void Swap(StorageData* other);
  
  // implements Message ----------------------------------------------
  
  StorageData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StorageData& from);
  void MergeFrom(const StorageData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);
  
  // repeated .KV_UINT64 uint64_kv = 2;
  inline int uint64_kv_size() const;
  inline void clear_uint64_kv();
  static const int kUint64KvFieldNumber = 2;
  inline const ::KV_UINT64& uint64_kv(int index) const;
  inline ::KV_UINT64* mutable_uint64_kv(int index);
  inline ::KV_UINT64* add_uint64_kv();
  inline const ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >&
      uint64_kv() const;
  inline ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >*
      mutable_uint64_kv();
  
  // repeated .KV_STRING string_kv = 3;
  inline int string_kv_size() const;
  inline void clear_string_kv();
  static const int kStringKvFieldNumber = 3;
  inline const ::KV_STRING& string_kv(int index) const;
  inline ::KV_STRING* mutable_string_kv(int index);
  inline ::KV_STRING* add_string_kv();
  inline const ::google::protobuf::RepeatedPtrField< ::KV_STRING >&
      string_kv() const;
  inline ::google::protobuf::RepeatedPtrField< ::KV_STRING >*
      mutable_string_kv();
  
  // @@protoc_insertion_point(class_scope:StorageData)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::KV_UINT64 > uint64_kv_;
  ::google::protobuf::RepeatedPtrField< ::KV_STRING > string_kv_;
  ::google::protobuf::uint32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_SNMPData_2eproto();
  friend void protobuf_AssignDesc_SNMPData_2eproto();
  friend void protobuf_ShutdownFile_SNMPData_2eproto();
  
  void InitAsDefaultInstance();
  static StorageData* default_instance_;
};
// -------------------------------------------------------------------

class SNMPData : public ::google::protobuf::Message {
 public:
  SNMPData();
  virtual ~SNMPData();
  
  SNMPData(const SNMPData& from);
  
  inline SNMPData& operator=(const SNMPData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SNMPData& default_instance();
  
  void Swap(SNMPData* other);
  
  // implements Message ----------------------------------------------
  
  SNMPData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SNMPData& from);
  void MergeFrom(const SNMPData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline const ::std::string& server_id() const;
  inline void set_server_id(const ::std::string& value);
  inline void set_server_id(const char* value);
  inline void set_server_id(const char* value, size_t size);
  inline ::std::string* mutable_server_id();
  inline ::std::string* release_server_id();
  
  // required uint32 server_type = 2;
  inline bool has_server_type() const;
  inline void clear_server_type();
  static const int kServerTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 server_type() const;
  inline void set_server_type(::google::protobuf::uint32 value);
  
  // required uint32 os_type = 3;
  inline bool has_os_type() const;
  inline void clear_os_type();
  static const int kOsTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 os_type() const;
  inline void set_os_type(::google::protobuf::uint32 value);
  
  // required uint32 collect_time = 4;
  inline bool has_collect_time() const;
  inline void clear_collect_time();
  static const int kCollectTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 collect_time() const;
  inline void set_collect_time(::google::protobuf::uint32 value);
  
  // optional string server_ip = 5;
  inline bool has_server_ip() const;
  inline void clear_server_ip();
  static const int kServerIpFieldNumber = 5;
  inline const ::std::string& server_ip() const;
  inline void set_server_ip(const ::std::string& value);
  inline void set_server_ip(const char* value);
  inline void set_server_ip(const char* value, size_t size);
  inline ::std::string* mutable_server_ip();
  inline ::std::string* release_server_ip();
  
  // optional string server_name = 6;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 6;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const char* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  
  // required uint32 mib_type = 7;
  inline bool has_mib_type() const;
  inline void clear_mib_type();
  static const int kMibTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 mib_type() const;
  inline void set_mib_type(::google::protobuf::uint32 value);
  
  // repeated .Raid raid_info = 8;
  inline int raid_info_size() const;
  inline void clear_raid_info();
  static const int kRaidInfoFieldNumber = 8;
  inline const ::Raid& raid_info(int index) const;
  inline ::Raid* mutable_raid_info(int index);
  inline ::Raid* add_raid_info();
  inline const ::google::protobuf::RepeatedPtrField< ::Raid >&
      raid_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::Raid >*
      mutable_raid_info();
  
  // repeated .PD pd_info = 9;
  inline int pd_info_size() const;
  inline void clear_pd_info();
  static const int kPdInfoFieldNumber = 9;
  inline const ::PD& pd_info(int index) const;
  inline ::PD* mutable_pd_info(int index);
  inline ::PD* add_pd_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PD >&
      pd_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PD >*
      mutable_pd_info();
  
  // repeated .VD vd_info = 10;
  inline int vd_info_size() const;
  inline void clear_vd_info();
  static const int kVdInfoFieldNumber = 10;
  inline const ::VD& vd_info(int index) const;
  inline ::VD* mutable_vd_info(int index);
  inline ::VD* add_vd_info();
  inline const ::google::protobuf::RepeatedPtrField< ::VD >&
      vd_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::VD >*
      mutable_vd_info();
  
  // optional .ProcData proc_data = 11;
  inline bool has_proc_data() const;
  inline void clear_proc_data();
  static const int kProcDataFieldNumber = 11;
  inline const ::ProcData& proc_data() const;
  inline ::ProcData* mutable_proc_data();
  inline ::ProcData* release_proc_data();
  
  // optional string ssd_data = 12;
  inline bool has_ssd_data() const;
  inline void clear_ssd_data();
  static const int kSsdDataFieldNumber = 12;
  inline const ::std::string& ssd_data() const;
  inline void set_ssd_data(const ::std::string& value);
  inline void set_ssd_data(const char* value);
  inline void set_ssd_data(const char* value, size_t size);
  inline ::std::string* mutable_ssd_data();
  inline ::std::string* release_ssd_data();
  
  // optional uint32 proc_error = 13;
  inline bool has_proc_error() const;
  inline void clear_proc_error();
  static const int kProcErrorFieldNumber = 13;
  inline ::google::protobuf::uint32 proc_error() const;
  inline void set_proc_error(::google::protobuf::uint32 value);
  
  // optional uint32 raid_error = 14;
  inline bool has_raid_error() const;
  inline void clear_raid_error();
  static const int kRaidErrorFieldNumber = 14;
  inline ::google::protobuf::uint32 raid_error() const;
  inline void set_raid_error(::google::protobuf::uint32 value);
  
  // optional uint32 ssd_error = 15;
  inline bool has_ssd_error() const;
  inline void clear_ssd_error();
  static const int kSsdErrorFieldNumber = 15;
  inline ::google::protobuf::uint32 ssd_error() const;
  inline void set_ssd_error(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:SNMPData)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_server_type();
  inline void clear_has_server_type();
  inline void set_has_os_type();
  inline void clear_has_os_type();
  inline void set_has_collect_time();
  inline void clear_has_collect_time();
  inline void set_has_server_ip();
  inline void clear_has_server_ip();
  inline void set_has_server_name();
  inline void clear_has_server_name();
  inline void set_has_mib_type();
  inline void clear_has_mib_type();
  inline void set_has_proc_data();
  inline void clear_has_proc_data();
  inline void set_has_ssd_data();
  inline void clear_has_ssd_data();
  inline void set_has_proc_error();
  inline void clear_has_proc_error();
  inline void set_has_raid_error();
  inline void clear_has_raid_error();
  inline void set_has_ssd_error();
  inline void clear_has_ssd_error();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* server_id_;
  ::google::protobuf::uint32 server_type_;
  ::google::protobuf::uint32 os_type_;
  ::std::string* server_ip_;
  ::google::protobuf::uint32 collect_time_;
  ::google::protobuf::uint32 mib_type_;
  ::std::string* server_name_;
  ::google::protobuf::RepeatedPtrField< ::Raid > raid_info_;
  ::google::protobuf::RepeatedPtrField< ::PD > pd_info_;
  ::google::protobuf::RepeatedPtrField< ::VD > vd_info_;
  ::ProcData* proc_data_;
  ::std::string* ssd_data_;
  ::google::protobuf::uint32 proc_error_;
  ::google::protobuf::uint32 raid_error_;
  ::google::protobuf::uint32 ssd_error_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  friend void  protobuf_AddDesc_SNMPData_2eproto();
  friend void protobuf_AssignDesc_SNMPData_2eproto();
  friend void protobuf_ShutdownFile_SNMPData_2eproto();
  
  void InitAsDefaultInstance();
  static SNMPData* default_instance_;
};
// ===================================================================


// ===================================================================

// KV_UINT64

// optional string name = 1;
inline bool KV_UINT64::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KV_UINT64::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KV_UINT64::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KV_UINT64::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& KV_UINT64::name() const {
  return *name_;
}
inline void KV_UINT64::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void KV_UINT64::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void KV_UINT64::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KV_UINT64::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* KV_UINT64::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 value = 2;
inline bool KV_UINT64::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KV_UINT64::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KV_UINT64::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KV_UINT64::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 KV_UINT64::value() const {
  return value_;
}
inline void KV_UINT64::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// KV_STRING

// optional string name = 1;
inline bool KV_STRING::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KV_STRING::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KV_STRING::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KV_STRING::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& KV_STRING::name() const {
  return *name_;
}
inline void KV_STRING::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void KV_STRING::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void KV_STRING::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KV_STRING::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* KV_STRING::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string value = 2;
inline bool KV_STRING::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KV_STRING::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KV_STRING::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KV_STRING::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& KV_STRING::value() const {
  return *value_;
}
inline void KV_STRING::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void KV_STRING::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void KV_STRING::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KV_STRING::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* KV_STRING::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// IfData

// repeated .KV_UINT64 uint64_kv = 1;
inline int IfData::uint64_kv_size() const {
  return uint64_kv_.size();
}
inline void IfData::clear_uint64_kv() {
  uint64_kv_.Clear();
}
inline const ::KV_UINT64& IfData::uint64_kv(int index) const {
  return uint64_kv_.Get(index);
}
inline ::KV_UINT64* IfData::mutable_uint64_kv(int index) {
  return uint64_kv_.Mutable(index);
}
inline ::KV_UINT64* IfData::add_uint64_kv() {
  return uint64_kv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >&
IfData::uint64_kv() const {
  return uint64_kv_;
}
inline ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >*
IfData::mutable_uint64_kv() {
  return &uint64_kv_;
}

// repeated .KV_STRING string_kv = 2;
inline int IfData::string_kv_size() const {
  return string_kv_.size();
}
inline void IfData::clear_string_kv() {
  string_kv_.Clear();
}
inline const ::KV_STRING& IfData::string_kv(int index) const {
  return string_kv_.Get(index);
}
inline ::KV_STRING* IfData::mutable_string_kv(int index) {
  return string_kv_.Mutable(index);
}
inline ::KV_STRING* IfData::add_string_kv() {
  return string_kv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KV_STRING >&
IfData::string_kv() const {
  return string_kv_;
}
inline ::google::protobuf::RepeatedPtrField< ::KV_STRING >*
IfData::mutable_string_kv() {
  return &string_kv_;
}

// -------------------------------------------------------------------

// DiskData

// required uint32 index = 1;
inline bool DiskData::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DiskData::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DiskData::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DiskData::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 DiskData::index() const {
  return index_;
}
inline void DiskData::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// repeated .KV_UINT64 uint64_kv = 2;
inline int DiskData::uint64_kv_size() const {
  return uint64_kv_.size();
}
inline void DiskData::clear_uint64_kv() {
  uint64_kv_.Clear();
}
inline const ::KV_UINT64& DiskData::uint64_kv(int index) const {
  return uint64_kv_.Get(index);
}
inline ::KV_UINT64* DiskData::mutable_uint64_kv(int index) {
  return uint64_kv_.Mutable(index);
}
inline ::KV_UINT64* DiskData::add_uint64_kv() {
  return uint64_kv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >&
DiskData::uint64_kv() const {
  return uint64_kv_;
}
inline ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >*
DiskData::mutable_uint64_kv() {
  return &uint64_kv_;
}

// repeated .KV_STRING string_kv = 3;
inline int DiskData::string_kv_size() const {
  return string_kv_.size();
}
inline void DiskData::clear_string_kv() {
  string_kv_.Clear();
}
inline const ::KV_STRING& DiskData::string_kv(int index) const {
  return string_kv_.Get(index);
}
inline ::KV_STRING* DiskData::mutable_string_kv(int index) {
  return string_kv_.Mutable(index);
}
inline ::KV_STRING* DiskData::add_string_kv() {
  return string_kv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KV_STRING >&
DiskData::string_kv() const {
  return string_kv_;
}
inline ::google::protobuf::RepeatedPtrField< ::KV_STRING >*
DiskData::mutable_string_kv() {
  return &string_kv_;
}

// -------------------------------------------------------------------

// ProcData

// repeated .KV_UINT64 uint64_kv = 1;
inline int ProcData::uint64_kv_size() const {
  return uint64_kv_.size();
}
inline void ProcData::clear_uint64_kv() {
  uint64_kv_.Clear();
}
inline const ::KV_UINT64& ProcData::uint64_kv(int index) const {
  return uint64_kv_.Get(index);
}
inline ::KV_UINT64* ProcData::mutable_uint64_kv(int index) {
  return uint64_kv_.Mutable(index);
}
inline ::KV_UINT64* ProcData::add_uint64_kv() {
  return uint64_kv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >&
ProcData::uint64_kv() const {
  return uint64_kv_;
}
inline ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >*
ProcData::mutable_uint64_kv() {
  return &uint64_kv_;
}

// repeated .KV_STRING string_kv = 2;
inline int ProcData::string_kv_size() const {
  return string_kv_.size();
}
inline void ProcData::clear_string_kv() {
  string_kv_.Clear();
}
inline const ::KV_STRING& ProcData::string_kv(int index) const {
  return string_kv_.Get(index);
}
inline ::KV_STRING* ProcData::mutable_string_kv(int index) {
  return string_kv_.Mutable(index);
}
inline ::KV_STRING* ProcData::add_string_kv() {
  return string_kv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KV_STRING >&
ProcData::string_kv() const {
  return string_kv_;
}
inline ::google::protobuf::RepeatedPtrField< ::KV_STRING >*
ProcData::mutable_string_kv() {
  return &string_kv_;
}

// repeated .IfData if_info = 3;
inline int ProcData::if_info_size() const {
  return if_info_.size();
}
inline void ProcData::clear_if_info() {
  if_info_.Clear();
}
inline const ::IfData& ProcData::if_info(int index) const {
  return if_info_.Get(index);
}
inline ::IfData* ProcData::mutable_if_info(int index) {
  return if_info_.Mutable(index);
}
inline ::IfData* ProcData::add_if_info() {
  return if_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IfData >&
ProcData::if_info() const {
  return if_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::IfData >*
ProcData::mutable_if_info() {
  return &if_info_;
}

// repeated .DiskData disk_info = 4;
inline int ProcData::disk_info_size() const {
  return disk_info_.size();
}
inline void ProcData::clear_disk_info() {
  disk_info_.Clear();
}
inline const ::DiskData& ProcData::disk_info(int index) const {
  return disk_info_.Get(index);
}
inline ::DiskData* ProcData::mutable_disk_info(int index) {
  return disk_info_.Mutable(index);
}
inline ::DiskData* ProcData::add_disk_info() {
  return disk_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DiskData >&
ProcData::disk_info() const {
  return disk_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::DiskData >*
ProcData::mutable_disk_info() {
  return &disk_info_;
}

// repeated .StorageData storage_info = 5;
inline int ProcData::storage_info_size() const {
  return storage_info_.size();
}
inline void ProcData::clear_storage_info() {
  storage_info_.Clear();
}
inline const ::StorageData& ProcData::storage_info(int index) const {
  return storage_info_.Get(index);
}
inline ::StorageData* ProcData::mutable_storage_info(int index) {
  return storage_info_.Mutable(index);
}
inline ::StorageData* ProcData::add_storage_info() {
  return storage_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::StorageData >&
ProcData::storage_info() const {
  return storage_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::StorageData >*
ProcData::mutable_storage_info() {
  return &storage_info_;
}

// -------------------------------------------------------------------

// Raid

// repeated .KV_UINT64 uint64_kv = 1;
inline int Raid::uint64_kv_size() const {
  return uint64_kv_.size();
}
inline void Raid::clear_uint64_kv() {
  uint64_kv_.Clear();
}
inline const ::KV_UINT64& Raid::uint64_kv(int index) const {
  return uint64_kv_.Get(index);
}
inline ::KV_UINT64* Raid::mutable_uint64_kv(int index) {
  return uint64_kv_.Mutable(index);
}
inline ::KV_UINT64* Raid::add_uint64_kv() {
  return uint64_kv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >&
Raid::uint64_kv() const {
  return uint64_kv_;
}
inline ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >*
Raid::mutable_uint64_kv() {
  return &uint64_kv_;
}

// repeated .KV_STRING string_kv = 2;
inline int Raid::string_kv_size() const {
  return string_kv_.size();
}
inline void Raid::clear_string_kv() {
  string_kv_.Clear();
}
inline const ::KV_STRING& Raid::string_kv(int index) const {
  return string_kv_.Get(index);
}
inline ::KV_STRING* Raid::mutable_string_kv(int index) {
  return string_kv_.Mutable(index);
}
inline ::KV_STRING* Raid::add_string_kv() {
  return string_kv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KV_STRING >&
Raid::string_kv() const {
  return string_kv_;
}
inline ::google::protobuf::RepeatedPtrField< ::KV_STRING >*
Raid::mutable_string_kv() {
  return &string_kv_;
}

// -------------------------------------------------------------------

// PD

// required uint32 index = 1;
inline bool PD::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PD::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PD::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PD::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 PD::index() const {
  return index_;
}
inline void PD::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// repeated .KV_UINT64 uint64_kv = 2;
inline int PD::uint64_kv_size() const {
  return uint64_kv_.size();
}
inline void PD::clear_uint64_kv() {
  uint64_kv_.Clear();
}
inline const ::KV_UINT64& PD::uint64_kv(int index) const {
  return uint64_kv_.Get(index);
}
inline ::KV_UINT64* PD::mutable_uint64_kv(int index) {
  return uint64_kv_.Mutable(index);
}
inline ::KV_UINT64* PD::add_uint64_kv() {
  return uint64_kv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >&
PD::uint64_kv() const {
  return uint64_kv_;
}
inline ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >*
PD::mutable_uint64_kv() {
  return &uint64_kv_;
}

// repeated .KV_STRING string_kv = 3;
inline int PD::string_kv_size() const {
  return string_kv_.size();
}
inline void PD::clear_string_kv() {
  string_kv_.Clear();
}
inline const ::KV_STRING& PD::string_kv(int index) const {
  return string_kv_.Get(index);
}
inline ::KV_STRING* PD::mutable_string_kv(int index) {
  return string_kv_.Mutable(index);
}
inline ::KV_STRING* PD::add_string_kv() {
  return string_kv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KV_STRING >&
PD::string_kv() const {
  return string_kv_;
}
inline ::google::protobuf::RepeatedPtrField< ::KV_STRING >*
PD::mutable_string_kv() {
  return &string_kv_;
}

// -------------------------------------------------------------------

// VD

// required uint32 index = 1;
inline bool VD::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VD::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VD::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VD::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 VD::index() const {
  return index_;
}
inline void VD::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// repeated .KV_UINT64 uint64_kv = 2;
inline int VD::uint64_kv_size() const {
  return uint64_kv_.size();
}
inline void VD::clear_uint64_kv() {
  uint64_kv_.Clear();
}
inline const ::KV_UINT64& VD::uint64_kv(int index) const {
  return uint64_kv_.Get(index);
}
inline ::KV_UINT64* VD::mutable_uint64_kv(int index) {
  return uint64_kv_.Mutable(index);
}
inline ::KV_UINT64* VD::add_uint64_kv() {
  return uint64_kv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >&
VD::uint64_kv() const {
  return uint64_kv_;
}
inline ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >*
VD::mutable_uint64_kv() {
  return &uint64_kv_;
}

// repeated .KV_STRING string_kv = 3;
inline int VD::string_kv_size() const {
  return string_kv_.size();
}
inline void VD::clear_string_kv() {
  string_kv_.Clear();
}
inline const ::KV_STRING& VD::string_kv(int index) const {
  return string_kv_.Get(index);
}
inline ::KV_STRING* VD::mutable_string_kv(int index) {
  return string_kv_.Mutable(index);
}
inline ::KV_STRING* VD::add_string_kv() {
  return string_kv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KV_STRING >&
VD::string_kv() const {
  return string_kv_;
}
inline ::google::protobuf::RepeatedPtrField< ::KV_STRING >*
VD::mutable_string_kv() {
  return &string_kv_;
}

// -------------------------------------------------------------------

// StorageData

// required uint32 index = 1;
inline bool StorageData::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StorageData::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StorageData::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StorageData::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 StorageData::index() const {
  return index_;
}
inline void StorageData::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// repeated .KV_UINT64 uint64_kv = 2;
inline int StorageData::uint64_kv_size() const {
  return uint64_kv_.size();
}
inline void StorageData::clear_uint64_kv() {
  uint64_kv_.Clear();
}
inline const ::KV_UINT64& StorageData::uint64_kv(int index) const {
  return uint64_kv_.Get(index);
}
inline ::KV_UINT64* StorageData::mutable_uint64_kv(int index) {
  return uint64_kv_.Mutable(index);
}
inline ::KV_UINT64* StorageData::add_uint64_kv() {
  return uint64_kv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >&
StorageData::uint64_kv() const {
  return uint64_kv_;
}
inline ::google::protobuf::RepeatedPtrField< ::KV_UINT64 >*
StorageData::mutable_uint64_kv() {
  return &uint64_kv_;
}

// repeated .KV_STRING string_kv = 3;
inline int StorageData::string_kv_size() const {
  return string_kv_.size();
}
inline void StorageData::clear_string_kv() {
  string_kv_.Clear();
}
inline const ::KV_STRING& StorageData::string_kv(int index) const {
  return string_kv_.Get(index);
}
inline ::KV_STRING* StorageData::mutable_string_kv(int index) {
  return string_kv_.Mutable(index);
}
inline ::KV_STRING* StorageData::add_string_kv() {
  return string_kv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KV_STRING >&
StorageData::string_kv() const {
  return string_kv_;
}
inline ::google::protobuf::RepeatedPtrField< ::KV_STRING >*
StorageData::mutable_string_kv() {
  return &string_kv_;
}

// -------------------------------------------------------------------

// SNMPData

// required string server_id = 1;
inline bool SNMPData::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SNMPData::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SNMPData::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SNMPData::clear_server_id() {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    server_id_->clear();
  }
  clear_has_server_id();
}
inline const ::std::string& SNMPData::server_id() const {
  return *server_id_;
}
inline void SNMPData::set_server_id(const ::std::string& value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void SNMPData::set_server_id(const char* value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void SNMPData::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SNMPData::mutable_server_id() {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  return server_id_;
}
inline ::std::string* SNMPData::release_server_id() {
  clear_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_id_;
    server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 server_type = 2;
inline bool SNMPData::has_server_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SNMPData::set_has_server_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SNMPData::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SNMPData::clear_server_type() {
  server_type_ = 0u;
  clear_has_server_type();
}
inline ::google::protobuf::uint32 SNMPData::server_type() const {
  return server_type_;
}
inline void SNMPData::set_server_type(::google::protobuf::uint32 value) {
  set_has_server_type();
  server_type_ = value;
}

// required uint32 os_type = 3;
inline bool SNMPData::has_os_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SNMPData::set_has_os_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SNMPData::clear_has_os_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SNMPData::clear_os_type() {
  os_type_ = 0u;
  clear_has_os_type();
}
inline ::google::protobuf::uint32 SNMPData::os_type() const {
  return os_type_;
}
inline void SNMPData::set_os_type(::google::protobuf::uint32 value) {
  set_has_os_type();
  os_type_ = value;
}

// required uint32 collect_time = 4;
inline bool SNMPData::has_collect_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SNMPData::set_has_collect_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SNMPData::clear_has_collect_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SNMPData::clear_collect_time() {
  collect_time_ = 0u;
  clear_has_collect_time();
}
inline ::google::protobuf::uint32 SNMPData::collect_time() const {
  return collect_time_;
}
inline void SNMPData::set_collect_time(::google::protobuf::uint32 value) {
  set_has_collect_time();
  collect_time_ = value;
}

// optional string server_ip = 5;
inline bool SNMPData::has_server_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SNMPData::set_has_server_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SNMPData::clear_has_server_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SNMPData::clear_server_ip() {
  if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
    server_ip_->clear();
  }
  clear_has_server_ip();
}
inline const ::std::string& SNMPData::server_ip() const {
  return *server_ip_;
}
inline void SNMPData::set_server_ip(const ::std::string& value) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(value);
}
inline void SNMPData::set_server_ip(const char* value) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(value);
}
inline void SNMPData::set_server_ip(const char* value, size_t size) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SNMPData::mutable_server_ip() {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  return server_ip_;
}
inline ::std::string* SNMPData::release_server_ip() {
  clear_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_ip_;
    server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string server_name = 6;
inline bool SNMPData::has_server_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SNMPData::set_has_server_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SNMPData::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SNMPData::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& SNMPData::server_name() const {
  return *server_name_;
}
inline void SNMPData::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void SNMPData::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void SNMPData::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SNMPData::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}
inline ::std::string* SNMPData::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 mib_type = 7;
inline bool SNMPData::has_mib_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SNMPData::set_has_mib_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SNMPData::clear_has_mib_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SNMPData::clear_mib_type() {
  mib_type_ = 0u;
  clear_has_mib_type();
}
inline ::google::protobuf::uint32 SNMPData::mib_type() const {
  return mib_type_;
}
inline void SNMPData::set_mib_type(::google::protobuf::uint32 value) {
  set_has_mib_type();
  mib_type_ = value;
}

// repeated .Raid raid_info = 8;
inline int SNMPData::raid_info_size() const {
  return raid_info_.size();
}
inline void SNMPData::clear_raid_info() {
  raid_info_.Clear();
}
inline const ::Raid& SNMPData::raid_info(int index) const {
  return raid_info_.Get(index);
}
inline ::Raid* SNMPData::mutable_raid_info(int index) {
  return raid_info_.Mutable(index);
}
inline ::Raid* SNMPData::add_raid_info() {
  return raid_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Raid >&
SNMPData::raid_info() const {
  return raid_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::Raid >*
SNMPData::mutable_raid_info() {
  return &raid_info_;
}

// repeated .PD pd_info = 9;
inline int SNMPData::pd_info_size() const {
  return pd_info_.size();
}
inline void SNMPData::clear_pd_info() {
  pd_info_.Clear();
}
inline const ::PD& SNMPData::pd_info(int index) const {
  return pd_info_.Get(index);
}
inline ::PD* SNMPData::mutable_pd_info(int index) {
  return pd_info_.Mutable(index);
}
inline ::PD* SNMPData::add_pd_info() {
  return pd_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PD >&
SNMPData::pd_info() const {
  return pd_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PD >*
SNMPData::mutable_pd_info() {
  return &pd_info_;
}

// repeated .VD vd_info = 10;
inline int SNMPData::vd_info_size() const {
  return vd_info_.size();
}
inline void SNMPData::clear_vd_info() {
  vd_info_.Clear();
}
inline const ::VD& SNMPData::vd_info(int index) const {
  return vd_info_.Get(index);
}
inline ::VD* SNMPData::mutable_vd_info(int index) {
  return vd_info_.Mutable(index);
}
inline ::VD* SNMPData::add_vd_info() {
  return vd_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::VD >&
SNMPData::vd_info() const {
  return vd_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::VD >*
SNMPData::mutable_vd_info() {
  return &vd_info_;
}

// optional .ProcData proc_data = 11;
inline bool SNMPData::has_proc_data() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SNMPData::set_has_proc_data() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SNMPData::clear_has_proc_data() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SNMPData::clear_proc_data() {
  if (proc_data_ != NULL) proc_data_->::ProcData::Clear();
  clear_has_proc_data();
}
inline const ::ProcData& SNMPData::proc_data() const {
  return proc_data_ != NULL ? *proc_data_ : *default_instance_->proc_data_;
}
inline ::ProcData* SNMPData::mutable_proc_data() {
  set_has_proc_data();
  if (proc_data_ == NULL) proc_data_ = new ::ProcData;
  return proc_data_;
}
inline ::ProcData* SNMPData::release_proc_data() {
  clear_has_proc_data();
  ::ProcData* temp = proc_data_;
  proc_data_ = NULL;
  return temp;
}

// optional string ssd_data = 12;
inline bool SNMPData::has_ssd_data() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SNMPData::set_has_ssd_data() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SNMPData::clear_has_ssd_data() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SNMPData::clear_ssd_data() {
  if (ssd_data_ != &::google::protobuf::internal::kEmptyString) {
    ssd_data_->clear();
  }
  clear_has_ssd_data();
}
inline const ::std::string& SNMPData::ssd_data() const {
  return *ssd_data_;
}
inline void SNMPData::set_ssd_data(const ::std::string& value) {
  set_has_ssd_data();
  if (ssd_data_ == &::google::protobuf::internal::kEmptyString) {
    ssd_data_ = new ::std::string;
  }
  ssd_data_->assign(value);
}
inline void SNMPData::set_ssd_data(const char* value) {
  set_has_ssd_data();
  if (ssd_data_ == &::google::protobuf::internal::kEmptyString) {
    ssd_data_ = new ::std::string;
  }
  ssd_data_->assign(value);
}
inline void SNMPData::set_ssd_data(const char* value, size_t size) {
  set_has_ssd_data();
  if (ssd_data_ == &::google::protobuf::internal::kEmptyString) {
    ssd_data_ = new ::std::string;
  }
  ssd_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SNMPData::mutable_ssd_data() {
  set_has_ssd_data();
  if (ssd_data_ == &::google::protobuf::internal::kEmptyString) {
    ssd_data_ = new ::std::string;
  }
  return ssd_data_;
}
inline ::std::string* SNMPData::release_ssd_data() {
  clear_has_ssd_data();
  if (ssd_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ssd_data_;
    ssd_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 proc_error = 13;
inline bool SNMPData::has_proc_error() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SNMPData::set_has_proc_error() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SNMPData::clear_has_proc_error() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SNMPData::clear_proc_error() {
  proc_error_ = 0u;
  clear_has_proc_error();
}
inline ::google::protobuf::uint32 SNMPData::proc_error() const {
  return proc_error_;
}
inline void SNMPData::set_proc_error(::google::protobuf::uint32 value) {
  set_has_proc_error();
  proc_error_ = value;
}

// optional uint32 raid_error = 14;
inline bool SNMPData::has_raid_error() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SNMPData::set_has_raid_error() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SNMPData::clear_has_raid_error() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SNMPData::clear_raid_error() {
  raid_error_ = 0u;
  clear_has_raid_error();
}
inline ::google::protobuf::uint32 SNMPData::raid_error() const {
  return raid_error_;
}
inline void SNMPData::set_raid_error(::google::protobuf::uint32 value) {
  set_has_raid_error();
  raid_error_ = value;
}

// optional uint32 ssd_error = 15;
inline bool SNMPData::has_ssd_error() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SNMPData::set_has_ssd_error() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SNMPData::clear_has_ssd_error() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SNMPData::clear_ssd_error() {
  ssd_error_ = 0u;
  clear_has_ssd_error();
}
inline ::google::protobuf::uint32 SNMPData::ssd_error() const {
  return ssd_error_;
}
inline void SNMPData::set_ssd_error(::google::protobuf::uint32 value) {
  set_has_ssd_error();
  ssd_error_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SNMPData_2eproto__INCLUDED
